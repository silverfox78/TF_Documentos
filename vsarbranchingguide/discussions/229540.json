[
  {
    "Id": "502024",
    "ThreadId": "229540",
    "Html": "<p>I have always worked in 1-2 developer shop and never used branching, (aka simple check in and check out).&nbsp;&nbsp;(Mostly due to zero guidance)&nbsp;and now I have to setup branching because, so much work is being thrown our way.&nbsp;&nbsp; Here is the situation.</p>\r\n<p>Using TFS 2008</p>\r\n<p>Due to restrainsts we have been given (1) Project where we support our portfolio of applications usins AREAs under the Parent PROJECT</p>\r\n<p>&nbsp;- Top Level = Portfolio</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp; -Project 1 (Folder)&nbsp;&nbsp;&nbsp; (Here is my questions after following the guides)</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:#ff0000\"><strong>Inside of Project 1 do I want to create 3 folders?</strong></span></p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - DEV_Description_To_Define_What_This_Dev_Is_For</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - MAIN&nbsp;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- RELEASE_Description_To_Define_What_This_Dev_Is_For_To_Match_Dev_Above</p>\r\n<p>Contintue to follow this for all projects</p>\r\n<p>&nbsp;&nbsp;&nbsp; - Project 2&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>1) When I set this up do I just add the files from my local system into MAIN then BRANCH to DEV and Release?&nbsp;&nbsp; Or do I add files to DEV and Branch to MAIN and Release.&nbsp; Again this is my first time doing this.</p>\r\n<p>2) Do I lock down MAIN to where only certain folks can merge from DEV to MAIN and the same for MAIN to Release...</p>\r\n<p>3)&nbsp;Once the DEV for a certain fix is complete do you delete the branch and create a new branch for future enhancements and bug fixes so you do not step on others</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-10-04T06:45:18.827-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "502053",
    "ThreadId": "229540",
    "Html": "<ol>\r\n<li>Create your Team Project ($/Porfolio)</li>\r\n<li>Create a Main folder (checkin all changes)</li>\r\n<li>I typically add a folder (under Main) called Src - this is where I recommend you add your local system.</li>\r\n<li>Check-in all changes.</li>\r\n<li>Next Branch Main to Dev (Do Not branch Dev to Main)</li>\r\n<li>Depending on the state of your code (is it ready to release? or is it beginning a new Dev cycle?).. branch Main to Release when you have tested the code in Main and are ready to release.</li>\r\n</ol>\r\n<p>You might have certain people (for example Dev Leads or Project Managers) who are allowed to do branching and merging. Certainly it might be advisable to lock down main to prevent all developers from doing branching or merging.</p>\r\n<p>Typically, Dev used for future releases and the Release branches are used for Hot fixes and / or Service Packs. Once you finish a Dev cycle, and release the code you would at this time create your release branch structure (branch Main to Release). This frees up the Dev branch for future enhancements (thus isolating them from the fixes being made to released code). It is not necessary to delete the Dev branch.. simply begin development of the next release, but only merge Dev to Main when it passes quality gates.</p>\r\n<p>Make your hot fixes in the servicing (release) branches. If desired, you can merge these fixes up to Main (and then up to Dev). But once you create a release branch, you should not merge from Main to Release (since Main and its Dev branches are now focused on future enhancements).</p>\r\n<p>Regards,<br>Bill Heys<br>VS ALM Ranger</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-10-04T07:43:15.11-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "502097",
    "ThreadId": "229540",
    "Html": "<p>Bill,</p>\r\n<p>Thanks for the quick reply.&nbsp; I have a couple of questions from the following:</p>\r\n<li>Create your Team Project ($/Porfolio) ---- Done IE&nbsp; MyPortfolio</li>\r\n<li>Create a Main folder (checkin all changes)&nbsp;&nbsp; ----&nbsp; Is it ok to have then insid MyPortfolio seperate projects</li>\r\n<p>$/RTI&nbsp; (BILL due to TFS standards they will only give us 1 Project and we have to maintain all our apps in that project per group to keep cost down and limitations of number of projects on TFS server...&nbsp; Note: I do not work on the TFS team, just a Tech Lead to where I want to get the most out of TFS to support developers)</p>\r\n<p>$/RTI/App1</p>\r\n<p>$/RTI/App1/DEV_Change_GridView_Enhancement_Project&nbsp;&nbsp; (Note this was Branched from MAIN below<br>$/RTI/App1/MAIN<br>$/RTI/App1/Release__Change_GridView_Enhancement_Project&nbsp;&nbsp; (Note this keeps releases seperated&nbsp; --- Correct or am I misunderstanding?)</p>\r\n<p><br>THEN REPEAT FOR ALL OTHER APPS IN THE $/RTI Portfolio, because you can define work scope by AREAS?<br>$/RTI/App2</p>\r\n<p>$/RTI/App2/DEV_Change_GridView_Enhancement_Project&nbsp;&nbsp; (Note this was Branched from MAIN below<br>$/RTI/App2/MAIN<br>$/RTI/App2/Release__Change_GridView_Enhancement_Project&nbsp;&nbsp; (Note this keeps releases seperated&nbsp; --- Correct or am I misunderstanding?)</p>\r\n<p>&nbsp;</p>\r\n<li>I typically add a folder (under Main) called Src - this is where I recommend you add your local system.&nbsp;&nbsp; (I do not understand the purpose of this because isn't MAIN the SRC?</li>\r\n<li>Check-in all changes. </li>\r\n<li>Next Branch Main to Dev (Do Not branch Dev to Main)&nbsp;&nbsp; (Again this is my first time do I need to setup the DEV folder or will the Branch do this?)</li>\r\n<li>Depending on the state of your code (is it ready to release? (YES it is stable and ready to setup this process of work) or is it beginning a new Dev cycle?&nbsp; --- I will be beginning a new Dev Cycle once the Branches are correct).. branch Main to Release when you have tested the code in Main and are ready to release. </li>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-10-04T09:23:33.673-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "502103",
    "ThreadId": "229540",
    "Html": "<p>1. I generally have separate team projects for each application. I tend to prefer this over having many *Main, Dev, and Release* branches within a single team project. I prefer this when App1 and App2 are on separate dev and release cycles. On the other hand if you are enhancing both&nbsp;App1 and App2 as part of a single dev and release cycle (a single&nbsp;initiative or single enhancement project), then your branching structure makes sense. You can more easily manage a project&nbsp;since work items&nbsp;cannot cross Team Project boundaries.&nbsp;</p>\r\n<p>ï»¿2. I would recommend keeping all folder names as short as possible. If not you are likely to run into path length (max 260 characters) problems</p>\r\n<p>3. In addition to source, I may have other things under the Main branch. For example I might have a docs or bin folder for files I want checked into source control (and branched with my source)</p>\r\n<p>4. When branching Main to Dev, you do not need to setup Dev first, Dev will be created by the branching operation</p>\r\n<p>5. I would recommend, given your answer to the last question, making sure that your code in Main is stable and ready to release (you say you have done this). Next branch Main to Release (or a set of Release branches - see the basic, standard, advanced branching plan). Finally branch Main to Dev to being the next cycle. (note - there probably is no difference whether you create the dev branch after the release branch or the release branch after the dev branch. Key is to have Main stable, and have Main be the parent of both the Dev and Release branch.</p>\r\n<p>7. You are correct that having a Release branch keeps releases separate (from the Main branch - where new development is being supported)</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-10-04T09:36:35.78-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "502196",
    "ThreadId": "229540",
    "Html": "<p>I would add in&nbsp;3 things:</p>\r\n<p>1) If you want to use the Branch Visualization feature in TFS 2010 don't create the scr folder under main, instead directly branch from the Main folder to the Development folder (which is created by the branch operation).</p>\r\n<p>2) After creating and checking the Main folder into TFS 2010 you need to right click and choose convert to branch under the branching and merging menu&nbsp;so that the branch visualization and track changeset&nbsp;features will work when you branch.</p>\r\n<p>3) I strongly recommend against having seperate team project for each application. Inside of Microsoft, both the Developer Division and the Office division each have 1 team project for their entire portfolio. [Think the Visual Studio and .Net Framework teams live under 1 team project, the Word, Excel, and PowerPoint teams live under 1 Team Project (Office for example).</p>",
    "PostedDate": "2010-10-04T13:51:46.56-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "502220",
    "ThreadId": "229540",
    "Html": "<p>Here is what I did...</p>\r\n<p>Created the application folder called</p>\r\n<p>ABC</p>\r\n<p>&nbsp;&nbsp; Next I created ABC/MAIN</p>\r\n<p>Opend the ABC.SLN --- compiled and the application is running as designed.</p>\r\n<p>Next I BRANCHED from MAIN to ABC/DEV&nbsp;&nbsp; Worked like a charm.</p>\r\n<p>Repeated the process for ABC/HOTFIX&nbsp; and ABC/RELEASE.</p>\r\n<p>&nbsp;</p>\r\n<p>I then did some minor changes to DEV and Merged with MAIN worked as designed.&nbsp;&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Now on to the next topic&nbsp; LABELS&nbsp;&nbsp; When do you use them and what is the benefit?&nbsp;&nbsp;</p>",
    "PostedDate": "2010-10-04T14:36:06.37-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "502232",
    "ThreadId": "229540",
    "Html": "<p>OK... I do have a question about the MERGE now...</p>\r\n<p>I checked out on the DEV branch...&nbsp;&nbsp; Added a simple comment.&nbsp;&nbsp; When I do this the BRANCH symbol goes away (45 Degree Arrows).&nbsp;&nbsp; Is it then&nbsp;a manual job to ensure that you merge changes aka Merge from the Folder Level or File Level back to the MAIN.</p>\r\n<p>Next I go to the MAIN Branch and see the Vertical Arrows one pointing down the other pointing up.&nbsp;&nbsp; <strong>I am assuming it is then the MAIN branch admin's job to &quot;Check In Pending Changes&quot; to complete the merge.&nbsp; Is this correct?&nbsp; </strong></p>\r\n<p><strong>Note:</strong> I am doing this as I write this.&nbsp;&nbsp; So, I will test one and see if the BRANCH symbol reappears in DEV branck... brb</p>\r\n<p>Ok, I cso not I checked in pending changes and the Vertical Arrows are gone, but now there is is not a BRANCH symbol next to the DEV File and longer.&nbsp;&nbsp;&nbsp; Do I have to rebranch from MAIN?&nbsp;&nbsp;&nbsp; Sorry for all the questions.&nbsp; I am just really new to this and want to be sure I understand.</p>\r\n<p>I event tried to Branch the file again and get The item &quot;aka file&quot; already exists...&nbsp; So how do you get files from possibly another Deveopment Branch that got merged from MAIN back to DEV?</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-10-04T15:16:09.72-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "502458",
    "ThreadId": "229540",
    "Html": "<p>My response to Allen's points:</p>\r\n<p>1. Creating one or more folders (for example Src, Dev, or Bin) under the Main&nbsp;branch in TFS 2010 doe not prevent branch visualization. To be clear, I am not changing the source of the branch operation (it will be Main), but there is, with my recommendation, the opportunity to have sub folders under the branch, which will be part of the Dev branch, Release branch, etc. If you don't want these sub folders, don't create them. But it has nothing to do with the visualization.</p>\r\n<p>3. Having separate team projects works well when these two projects need different process templates, are for completely separate teams (e.g. Office and Visual Studio) or are developed and / or released on different schedules. Having multiple applications within the same team project works well when these applications are developed and released together. This is why the Office Division and the Developer Division do not coexist in the same Team Project.</p>\r\n<p>&nbsp;Bill Heys<br>VS ALM Ranger</p>",
    "PostedDate": "2010-10-05T06:10:45.4-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "502464",
    "ThreadId": "229540",
    "Html": "<p>Merging is always a manual process. When a developer checks out a file, makes a change, and checks-in this change - the developer controls when (or when not) to do this check-in. You should not want checked-in changes in a Dev branch to be automatically merged to the Main branch. You should alway control when and how merges are done. We recommend fully testing the changes in a Dev branch (in other words, the&nbsp;Dev code should&nbsp;pass quality gates) before it is merged into Main.</p>\r\n<p>Once a merge completes, changes are pended against the target branch. These need to be checked-in to complete merge.</p>\r\n<p>I am concerned about some of your process. I think you are using the term DEV file when in fact it is a folder (or branched folder in TFS 2008, in TFS 2010 it would be a true branch). The arrows are not a BRANCH symbol, more likely they are an indication that a file has been checked-out or has pending changes. Once you branch Main to Dev, you have a merge releationship. You can merge from Main to Dev and / or from Dev to Main.</p>\r\n<p>Please read (or re-read) the Branching Guidance and related documents. I think you will find that most of your questions are answered (or avoided) if you follow the recommended processes in the guidance.</p>\r\n<p>Regards,<br>Bill Heys<br>VS ALM Ranger</p>",
    "PostedDate": "2010-10-05T06:21:31.04-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "502671",
    "ThreadId": "229540",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\">See below<br><strong><br>wheys wrote:</strong><br>\r\n<p>Merging is always a manual process. When a developer checks out a file, makes a change, and checks-in this change - the developer controls when (or when not) to do this check-in. You should not want checked-in changes in a Dev branch to be automatically merged to the Main branch. You should alway control when and how merges are done. We recommend fully testing the changes in a Dev branch (in other words, the&nbsp;Dev code should&nbsp;pass quality gates) before it is merged into Main.</p>\r\n<p>Once a merge completes, changes are pended against the target branch. These need to be checked-in to complete merge.</p>\r\n<p>I am concerned about some of your process. I think you are using the term DEV file <span style=\"color:#ff0000\">(I am referring to DEV folder not file)</span>&nbsp;when in fact it is a folder (or branched folder in TFS 2008, in TFS 2010 it would be a true branch). The arrows are not a BRANCH symbol, more likely they are an indication that a file has been checked-out or has pending changes. <span style=\"color:#ff0000\">(I am unsure on this because when I perform the branch the arrows are pointing to the Right and down 45 Degrees to the right as well)</span>&nbsp;Once you branch Main to Dev, you have a merge releationship. You can merge from Main to Dev and / or from Dev to Main.&nbsp; <span style=\"color:#ff0000\">(I agree with this)</span></p>\r\n<p>Please read (or re-read)&nbsp;&nbsp;the Branching Guidance and related documents. I think you will find that most of your questions are answered (or avoided) if you follow the recommended processes in the guidance.</p>\r\n<p>Regards,<br>Bill Heys<br>VS ALM Ranger</p>\r\nBill thanks again for all the assistance...</blockquote>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-10-05T12:24:26.58-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "502680",
    "ThreadId": "229540",
    "Html": "<p>Bill so here is the new scenario:</p>\r\n<p>Developer A is working from the DEVELOPMENT BRANCH they make a change on one file,&nbsp; do you think of merging rather at a FOLDER level or can you do it from a FILE level.&nbsp;&nbsp; Because the problem I see is if DEVELOPER B was working on another BRANCH and merged to MAIN then how can you get MAIN back to Developer A.&nbsp;&nbsp; I tried to branch the single file again and get the error message: &quot;The item $RTI/AppCode/DEV/Web.config already exists.&quot;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-10-05T13:01:43.903-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "509656",
    "ThreadId": "229540",
    "Html": "<p>Merging is only done at the branch level. If you branch MAIN to DEVELOPMENT, your only choice is to merge DEVELOPMENT to MAIN (or MAIN to DEVELOPMENT). The problem you pose is a classic challenge where two developers (or development teams) are working on separate development branches of MAIN. When Team A&nbsp;finishes their work in a&nbsp;their Dev branch and it is tested and passes some predetermined quality gates, the code from&nbsp;Team A's&nbsp;branch can be merged (integrated) into the Main branch. Before you do this, however, make sure that you do a final merge (forward integration from Main into&nbsp;Team A's&nbsp;Dev branch and test this integration first in their dev branch. Once the integration of the Team A's Dev feature is tested, merge&nbsp;Team A's&nbsp;Dev branch to Main and do a final round of integration testing. At this point, Main has the code from the Team A. The next time you merge Main with Team B's Dev branch, you will bring the Team A's code to Team B. The integration of this should be tested in&nbsp;Team B's&nbsp;Dev branch before being merged back down to Main.</p>\r\n<p>Regards,<br>Bill Heys<br>VS ALM Ranger</p>",
    "PostedDate": "2010-10-19T16:00:15.117-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "509901",
    "ThreadId": "229540",
    "Html": "<p>Wheys,</p>\r\n<p>I am proud to report that with my current branch and merge model based on the TFS Rangers I have been successful and now developing as a full blown software shop.</p>\r\n<p>&nbsp;</p>\r\n<p>$PortfolioNameofAppsSupported - tfs.domain.com</p>\r\n<p>&nbsp;- App1 (Simply Folder to hold the other folders</p>\r\n<p>--Main this is where the Original code goes</p>\r\n<p>--------Branch DEV FROM MAIN</p>\r\n<p>--------Branch HotFix FROM MAIN</p>\r\n<p>--------Branch Release FROM MAIN</p>\r\n<p>And I have been merging back into MAIN then merging out to the other BRANCHES to ensure all is in sync.&nbsp; Works like a charm....</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-10-20T06:09:43.703-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "509962",
    "ThreadId": "229540",
    "Html": "<p>Thanks for the feedback. I am glad things are working well. My only suggestion would be that you should branch Hotifx from Main (as you have done) and then Release is branched from Hotfix.</p>\r\n<p>Regards,</p>\r\n<p>Bill Heys<br>VS ALM Ranger</p>",
    "PostedDate": "2010-10-20T07:52:07.807-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "509966",
    "ThreadId": "229540",
    "Html": "<p>With respect to the Hotfix and Release branches, our guidance recommends waiting until you test the code in Main before creating these branches. Once you create the Hotfix and&nbsp;Release branches, development can continue in the development and main branches for the following release. You do not want to merge from Main into the Hotfix / Release branches once you create them. Doing so would bring vNext code into your vCurrent release.</p>",
    "PostedDate": "2010-10-20T08:00:26.227-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "509992",
    "ThreadId": "229540",
    "Html": "<div class=WordSection1><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">It reads to me a bit odd that you note your branching as based on TFS Rangers while is nothing of what they recommend.</span></p><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"> - App1 (Simply Folder to hold the other folders</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">--Main this is where the Original code goes</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">--------Branch DEV FROM MAIN</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">--------Branch HotFix FROM MAIN</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">--------Branch Release FROM MAIN</span></p><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">The release branching tree is clear in the document and what purpose it serves.</span></p><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">But do not feel bad, I was only partially able to get my team to understand it.</span></p><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">They end up opting for implementing the visually similar branch but insisted into checking FI code from SP into HF into RTM for SP releases.</span></p><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">It was impossible to convey the idea that HF, SP, and RTM are all release branches.</span></p><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p><div><div style=\"border:none;border-top:solid #B5C4DF 1.0pt;padding:3.0pt 0in 0in 0in\"><p class=MsoNormal><b><span style=\"font-size:10.0pt;font-family:'Tahoma','sans-serif'\">From:</span></b><span style=\"font-size:10.0pt;font-family:'Tahoma','sans-serif'\"> moojjoo [mailto:notifications@codeplex.com] <br><b>Sent:</b> Wednesday, October 20, 2010 6:10 AM<br><b>To:</b> Ramon Aldana Borjes<br><b>Subject:</b> Re: Branching Setup Help Please [TFSBranchingGuideIII:229540]</span></p></div></div><p class=MsoNormal> </p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">From: moojjoo</span></p><div style=\"margin-bottom:24.0pt\" id=ThreadNotificationPostBody><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">Wheys,</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">I am proud to report that with my current branch and merge model based on the TFS Rangers I have been successful and now developing as a full blown software shop.</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"> </span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">$PortfolioNameofAppsSupported - tfs.domain.com</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"> - App1 (Simply Folder to hold the other folders</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">--Main this is where the Original code goes</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">--------Branch DEV FROM MAIN</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">--------Branch HotFix FROM MAIN</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">--------Branch Release FROM MAIN</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">And I have been merging back into MAIN then merging out to the other BRANCHES to ensure all is in sync.  Works like a charm....</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"> </span></p></div><div style=\"border:none;border-top:solid #CCCCCC 1.0pt;padding:0in 0in 0in 0in\" id=ThreadNotificationFooter><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">Read the <a href=\"http://tfsbranchingguideiii.codeplex.com/Thread/View.aspx?ThreadId=229540&ANCHOR#Post509901\">full discussion online</a>.</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">To add a post to this discussion, reply to this email (<a href=\"mailto:TFSBranchingGuideIII@discussions.codeplex.com?subject=[TFSBranchingGuideIII:229540]\">TFSBranchingGuideIII@discussions.codeplex.com</a>)</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">To start a new discussion for this project, email <a href=\"mailto:TFSBranchingGuideIII@discussions.codeplex.com\">TFSBranchingGuideIII@discussions.codeplex.com</a></span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">You are receiving this email because you subscribed to this discussion on CodePlex. You can <a href=\"https://tfsbranchingguideiii.codeplex.com/subscriptions/thread/project/edit\">unsubscribe or change your settings</a> on codePlex.com.</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at codeplex.com</span></p></div></div>",
    "PostedDate": "2010-10-20T08:33:21.377-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "510037",
    "ThreadId": "229540",
    "Html": "<p>wheys and edaurdo that is what I am doing.</p>\r\n<p>If a bug is found we work in HOTFIX while continous Development happens.&nbsp;&nbsp; Once the HOTFIX is done the HOTFIX Branch is Merged to MAIN then MAIN Merged to Release and deployment from Release.&nbsp;&nbsp; Finally the code from MAIN is merged to DEV to ensure the fix is put into the DEV Branch...</p>\r\n<p>Dev is not merged with MAIN until all requirements for the new DEV is completed.</p>",
    "PostedDate": "2010-10-20T10:05:53.32-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "510050",
    "ThreadId": "229540",
    "Html": "<p>Once again, we do not merge Main to Release after the Release branch has been created. To summarize:</p>\r\n<p>1. Create the Main branch.<br>2. Branch Main to Dev and begin Development of V1.0 code in the Dev branch<br>3. Once the code in the Dev branch passes predetermined quality gates, it is ready to be merged to Main. Do a merge (Reverse Integration) from Dev to Main<br>3. Stabilize the code in Main (Deploy to QA for testing)<br>4. Once the code in Main passes the predetermined quality gates it is ready for release.<br>5. Branch the Main branch to Hotfix 1.0<br>6. Branch Hotfix 1.0 to Release 1.0 and make Release 1.0 Read-only.<br>7. After releasing Release 1.0, the Main Branch and the Dev Branch(es) are now available for V2.0 development - this is why you would not merge Main into a release branch once it is created. You would be overlaying released code with new feature development.<br>8. If post-release bugs in Release 1.0 are discovered, fix them in the Hotfix branch - and ship the hotfix (possibly as a patch) from the Hotfix 1.0 branch.<br>9. Merge the Hotfix from Hotfix 1.0 to Main (Reverse Integration) - this allows the hotfix to be part of the next (v2.0) release<br>10. Meanwhile V2.0 development is taking place in Main and the Dev branches<br>11. The Release 1.0 branch contains the state of the code as it was released (some organizations have an audit requirement here). It is read only and Hotfixes are NOT merged into this branch.<br>12. The Hotfix 1.0 branch contains fixes made after Release 1.0 was shipped. Each hotfix can be labelled and shipped as a patch rather than as a full release.<br>13. When development on V2.0 is complete, it is tested and once it passes quality gates it can be merged to Main (same as step 3).<br>14. On&nbsp;a daily basis, while development proceeds on vNext (v2.0), do a nightly build of the Main branch. Any changes in Main (such as hotfixes that have been merged into Main) need to be fully tested by QA<br>15. When you get a good daily build in Main, merge Main to the Dev branches (Forward Integration), but NOT to the Release branches.</p>\r\n<p>Code merges from Main to the Dev branches on a daily basis following a good Main build (hopefully with Build Verification Tests)<br>Code merges from Dev to Main when they are feature complete and they pass quality gates (typically feature complete is a milestone)<br>Code never merges from Main to Release branches - this will overlay released code with future development that might not be completely stabilized.<br>When released, code is branched (not merged) from Main to the Release branch(es). The Service Pack, Hotfix, and Release branches are all created at the same time. If you are using the advanced plan, Main is the parent to Service Pack, SP is the parent to Hotfix, and Hotfix is the parent to Release (which is read only)</p>\r\n<p>&nbsp;</p>\r\n<p>Regards,<br>Bill Heys<br>VS ALM Ranger</p>",
    "PostedDate": "2010-10-20T10:26:30.413-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "510093",
    "ThreadId": "229540",
    "Html": "<p>Bill this makes 100% sense.&nbsp;&nbsp; However now I have one other final question.</p>\r\n<p>For each new release do you create a new Release Branch?</p>\r\n<p>Release1</p>\r\n<p>Release2</p>\r\n<p>etc.</p>\r\n<p>Or do labels come into play here?</p>\r\n<p>&nbsp;</p>\r\n<p>Thank you so much for all the input this a very valuable thread.</p>",
    "PostedDate": "2010-10-20T11:56:55.023-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "510102",
    "ThreadId": "229540",
    "Html": "<p>Just to make sure we are using the same terminology here, let's frame this response in the context of a Microsoft product such as Windows.</p>\r\n<p>Over the last few decades, Microsoft has released many versions of Windows for the desktop. I can remember many *major* releases. For example:</p>\r\n<ul>\r\n<li>Windows 1</li>\r\n<li>Windows 2</li>\r\n<li>Windows 2.1</li>\r\n<li>Windows 3</li>\r\n<li>Windows 3.1</li>\r\n<li>Windows 95</li>\r\n<li>Windows 98</li>\r\n<li>Windows ME</li>\r\n<li>Windows XP</li>\r\n<li>Windows Vista</li>\r\n<li>Windows 7 </li>\r\n</ul>\r\n<p>For each of these *major* releases we would have a separate release branch.</p>\r\n<p>For each of these releases, we my have many if not dozens or hundreds of hotfixes. We might also have a few services packs. For example, I believe Windows XP is now on Service Pack 3 while Visa is on Service Pack 2.</p>\r\n<p>A hotfix is typically made to fix a specific bug for a specific customer (or limited set of customers). We often call this Quick Fix Engineering (QFEs). While hotfixes need to be tested, they are not subjected to the rigorous, time-consuming, exhuastive testing that a major release or even a service pack must undergo. For this reason, we often advise customers to only install a specific hotfix if they are experiencing a problem that the hotfix is designed to solve.</p>\r\n<p>For hotfixes, I would generally recommend simply doing a label, in the hotfix branch, of each hotfix. The hotfix would be shipped as a patch rather than a full install. But for major releases (for example Windows 3.0) and even minor releases (for example Windows 3.1) I recommend having a separate release branch. In some cases, such as in an agile project where releases are incremental and frequent, you might use labels instead of separate release branches. The overhead of creating a new branch is not significant. TFS stores the delta (changes), not copies of entire files. Since a release branch is made read-only, it would not have a lot of overhead, since it would not contain a lot of changes (or changesets).</p>\r\n<p>Labels, on the other hand are not immutable. This means that the content of a label can be changed over time. Files or changesets can be added or removed from a label. For this reason a label is useful for marking a milestone in a branch, but probably not as good a Release branch for keeping a copy of the code *as it was released* for archiving or audit purposes.</p>\r\n<p>Regards,<br>Bill Heys<br>VS ALM Ranger</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-10-20T12:20:15.76-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "510105",
    "ThreadId": "229540",
    "Html": "<p>Bill,</p>\r\n<p>I had been looking for a 101 course for Branching and Merging and you have taught me well.&nbsp;&nbsp; I thank you for your time.&nbsp;&nbsp; I totally understand this now.&nbsp; Hopefully, I will continue on .NET Development with TFS as the backbone source control, but I believe this theory would apply to any source control that a developer is involved with.</p>\r\n<p>Thank you so much,</p>\r\n<p>Robert Dannelly.</p>",
    "PostedDate": "2010-10-20T12:29:08.123-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]