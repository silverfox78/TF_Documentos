[
  {
    "Id": "814619",
    "ThreadId": "349773",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I recently did a source control migration from Subversion to TFS. In Subversion our developers were doing the following (regarding creation of the release branches):</p>\r\n<ol>\r\n<li>When the version in trunk (Main) was feature complete they created a &quot;Release&quot; branch. Usually named by the target version to create (equivalent to the Servicepack/Hotfix braches).\r\n</li><li>Then this version was tested, show stopping bug fixes were made on this branch.\r\n</li><li>When the testers said the version is OK, a tag was created (kind of a read only branch) and the tagged version was delivered.\r\n</li><li>When a customer requested a bug fix of a release version. The bug was fixed on the &quot;Release&quot; branch and a tag for the new version was created.\r\n</li></ol>\r\n<p>To me this sounds totally reasonable, so why do you recommend branching &quot;Servicepack/Hotfix&quot; and &quot;Release&quot; branch at the same time and say in the definition of the release branch that it is &quot;A branch where ship stopping bug fixes are made before major product\r\n release.&quot;.</p>\r\n<p>Isn't it more effort because I will have to merge my Release fixes before delivery back into &quot;Servicepack/Hotfix&quot;. In our Subversion solution, the pre release fixing is done in the same branch the post release hot fixes are done in. So now merging is necessary.</p>\r\n<p>Is there something I don't see here?</p>\r\n",
    "PostedDate": "2012-03-23T06:14:26.683-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "823924",
    "ThreadId": "349773",
    "Html": "<p>Great question.&nbsp; Only branch if you need to, and always keep it simple is the tone I hear from the above, and I definitely agree.</p>\r\n<p>As with most branching patterns, there is not necessarily a right/wrong and we have the pros and cons with every new branch.&nbsp; The worfklow you describe does sound reasonable.&nbsp; The recommendations to create a service pack, hotfix branch apply to a specific pattern, but are not a hard requirement for every scenario.&nbsp; Some of this comes down to how many release vehicles you intend to support&nbsp;in parallel at one time in prod, and with all&nbsp;branching...how much isolation you need in your development efforts.&nbsp; Your plan above sounds very similar to our \"Basic\" plan.</p>\r\n<p>So it sounds like you should implement the basic plan, and that will work for you.</p>\r\n<p>However...Let me play Devil's advocate:&nbsp; :)</p>\r\n<p>Not knowing your entire hiearchy, release strategies, dev branches, etc make it hard to answer exactly:&nbsp; In your example if I were to need to be doing development on a SP, where would I do that longer term dev ?(i assume the single release branch, I can't do it on Main as that is where next version is happening I assume)</p>\r\n<p>What if I were doing dev on a SP, and we find a critical bug fix that needs to be fixed before the SP is ready?&nbsp; I can't use the single release branch now, so I'm needing a place to do that work.&nbsp;&nbsp;There are other reasons:&nbsp; Some enterprises will insist that a branch be frozen in time once released, and never touched again for auditing (Read only).&nbsp; It is not the only way...A label could work here, or a log entry of the changeset.&nbsp; There are many ways.&nbsp;&nbsp; If these scenarios don't pertain to you, then definitely keep it simple.</p>\r\n<p>The good news is&nbsp;with TFS, you can branch&nbsp;\"on-demand\".&nbsp; One pattern you might consider is just to mmic what you mention above (again looks like basic plan to me), and if you were needing the extra branch&nbsp;just do it if the time comes.&nbsp;</p>\r\n<p>We are addressing some new patterns in the latest guidance as well as expand on differentiating between development branches and release branches a bit better.&nbsp; Some of this in our beta guidance, and&nbsp;the story will be more complete as we get closer to RTM, as we draw out more precisely the pros/cons.&nbsp;</p>\r\n<p>Below is a copy paste from the beta guidance.</p>\r\n<h2 style=\"margin: 10pt 0in 0pt;\"><a name=\"_Toc322072469\"><span style=\"font-family: Cambria; color: #4f81bd; font-size: medium;\">Basic Branch Plan</span></a></h2>\r\n<p class=\"MsoNormal\" style=\"margin: 0in 0in 10pt;\"><span style=\"font-family: Calibri;\">The basic branch plan with a main, dev, and release branch enables concurrent development for your next release, a stable MAIN branch for testing and a release branch for any ship blocking bug fixes.</span></p>\r\n<p class=\"MsoNormal\" style=\"margin: 0in 0in 10pt;\"><span style=\"font-family: Calibri;\">Multiple development areas are supported by creating additional development branches from MAIN.<span style=\"mso-spacerun: yes;\">&nbsp; </span>These are peers to each other and children of MAIN.</span></p>\r\n<p class=\"MsoNormal\" style=\"margin: 0in 0in 10pt;\"><span style=\"font-family: Calibri;\">Additional releases are supported by creating additional release branches for each product release.<span style=\"mso-spacerun: yes;\">&nbsp; </span>Each release branch is a child of MAIN and a peer to each other (e.g. release2.0 branch is peer to release3.0 and both are children of MAIN).<span style=\"mso-spacerun: yes;\">&nbsp; </span>If supporting only a single release in production at a time, you may consider a single release branch, and make bug fixes directly on this branch as depicted in the diagram below.</span></p>\r\n<p class=\"MsoNormal\" style=\"page-break-after: avoid; margin: 0in 0in 10pt;\"><span style=\"font-family: Calibri;\">Once the release branch is created MAIN and the development branches can start taking changes approved for the next product release.</span></p>\r\n<p><a name=\"_Toc322072471\"><span style=\"font-family: Cambria; color: #4f81bd; font-size: medium;\">Advanced Branch Plan</span></a></p>\r\n<p class=\"MsoNormal\" style=\"margin: 0in 0in 10pt;\"><span style=\"font-family: Calibri;\">The Advanced plan is for products that must support many release vehicles and servicing scenarios.<span style=\"mso-spacerun: yes;\">&nbsp; </span>The plan allows for concurrent development of a major release, service packs, Hotfixes and next version work.<span style=\"mso-spacerun: yes;\">&nbsp; </span>By adding a Hotfix branch between the Service Pack and Release branches, you add another level of parallel development as you may develop and release critical bug fixes via the Hotfix branch while doing longer term feature development, and less critical bug fixes on the Service Pack branch.<span style=\"mso-spacerun: yes;\">&nbsp; </span>You may create new release branches, as well as retire or delete old release branches, and you can also leverage security settings to ensure release branches are toggled to read only.<span style=\"mso-spacerun: yes;\">&nbsp; </span>This plan also allows you to support multiple releases in production at one time due to having multiple release branches.</span></p>\r\n<p>&nbsp;&nbsp;</p>\r\n<p>thanks,</p>\r\n<p>Mike Learned.</p>\r\n<div id=\"_mcePaste\" class=\"mcePaste\" style=\"position: absolute; width: 1px; height: 1px; overflow: hidden; top: 0px; left: -10000px;\">ï»¿</div>",
    "PostedDate": "2012-04-14T20:03:33.503-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "871572",
    "ThreadId": "349773",
    "Html": "<p><span style=\"color: #000000;\">I agree with Mike, that you should ONLY branch when the benefits outweigh the costs (of merging or not isolating parallel development).</span></p>\r\n<p><span style=\"color: #000000;\">I do take a strong position on some branching principles:</span></p>\r\n<ol>\r\n<li><span style=\"color: #000000;\">Every \"Release\" branch should be locked down&nbsp;(made read-only) immediately after it is created.</span></li>\r\n<li><span style=\"color: #000000;\">Since every Release branch is locked down when created, post-release changes \"require\" a Servicing branch. While it is preferrable to know in advance that you need to support post-release bug fixes or SPs (and create the servicing branch first, and branch the Release branch from the Servicing branch), you \"can\" create the proper structure at a later point in time if you need to. I would suggest creating a \"new release\" branch from the locked-down \"Release\" branch, making the new branch read-only and making the \"Release\" branch changeable (for bug fixes). The new structure would go from Main &gt; Release (read-only) to&nbsp;Main &gt; Release (changeable)&nbsp;&gt; Release_New (read-only)</span></li>\r\n<li><span style=\"color: #000000;\">Labels are not immutable. Label contents can be changed after they are created, and they are not auditable. Labels are therefore NOT a substitute for separate \"Release\" branches (which are auditable)</span></li>\r\n<li><span style=\"color: #000000;\">If you never need to make post-release fixes, the basic plan should work for you. Nothing in the Basic plan precludes you from having multiple Release branches (locked down) for auditing purposes.</span></li>\r\n<li><span style=\"color: #000000;\">If you require post-release support, then consider moving from the Basic plan to the Standard plan.</span></li>\r\n<li><span style=\"color: #000000;\">If you require \"both\" post-release bug fixing and periodic ServicePacks, then consider moving to the Advanced plan. Remember, in each of these plans, you can support multiple releases by repeating the Release branch structure (e.g. Main &gt; SP 1.0 &gt; Hotfix 1.0 &gt; Release 1.0 (locked down) and Main &gt; SP 1.1 &gt; Hotfix 1.1 &gt; Release 1.1 (locked down) and Main &gt; SP 2.0 &gt; Hotfix 2.0 &gt; Release 2.0 (locked down)</span></li>\r\n</ol>",
    "PostedDate": "2012-07-17T16:37:11.347-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]