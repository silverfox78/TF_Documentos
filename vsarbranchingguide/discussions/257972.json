[
  {
    "Id": "614098",
    "ThreadId": "257972",
    "Html": "\r\n<p><strong>Question:&nbsp;</strong>&nbsp;Under what circumstances (if any) would you consider recommending a &quot;virtual reparenting&quot;&nbsp;(treat the original parent or ancestor branch as a child branch and just reverse the terms RI and FI for this &quot;virtually\r\n reparented&quot; branch) or is it less risky to go through steps (and related risks) to reparent the ancestor branch?</p>\r\n<p><strong><span style=\"color:#663300\">Context:</span></strong></p>\r\n<ol>\r\n<li><span style=\"color:#663300\">We currently have a <strong>Mainline/Main </strong>\r\nbranch that is a child of the ancestor (current root) branch named <strong>Prod</strong>.\r\n</span></li><li><span style=\"color:#663300\">There is a reasonable chance that future livesite hotfixes from the ancestor root branch will need to be merged back into Main (new root branch that used to be a child of Prod) for up to a year.\r\n</span></li><li><span style=\"color:#663300\">I expect only a small number of merges (&lt;5) from original parent/ancestor branch to the Main branch.</span>\r\n</li></ol>\r\n<p><strong>Known Issues:</strong></p>\r\n<ol>\r\n<li>TFS Branch diagrams&nbsp;will inaccurately show original parent/ancestor as parent.\r\n</li><li>Anyone with write access to the original parent/ancestor has risk of forgetting the &quot;virtual reparented&quot; relationship and accidentally merging changes into this branch.\r\n</li></ol>\r\n<p><span style=\"color:#663300\"><strong>Thoughts: </strong>Technically I don't think there are any differences between parent and child branches. These concepts are designed to make complicated versioning relationships easier for humans to conceptually work\r\n with (hence reduce risk of doing wrong way merges). Even though this is the ancestor branch merges only from Prod to Main (&quot;Forward Integrations&quot; technically due to &quot;virtual reparent&quot;) it should be OK as long as only one Dev has rights to do these merges and\r\n RIs from Main to Prod are forbidden after virtual reparenting.</span></p>\r\n<p><strong>Reparent scheduling assertion: </strong>If reparenting a parent branch that is periodically merged with child branch then&nbsp;the best time to plan reparenting is immediately after both FI then&nbsp;RI (after which branches should have least number\r\n of conflicts to resolve).&nbsp;</p>\r\n<p style=\"padding-left:30px\">Please comment if this assertion is inaccurate or incomplete.</p>\r\n",
    "PostedDate": "2011-05-17T11:03:37.027-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "614108",
    "ThreadId": "257972",
    "Html": "<p>I think the most important distinction comes when you have more than one parent and one child. When I explain branching I like to stress the point: When you have a one-to-many hierarchy of branches (for example, Main -&gt; Dev1, Main -&gt; Dev2, etc) the one (Main) should be the parent to the many (Dev1, Dev2). If you start with Main -&gt; Dev (Main as a parent to Dev). then adding new Dev branches makes them all siblings under Main. But if you start with Dev -&gt; Main (Dev as a parent to Main) when you add another Dev branch (Main -&gt; Dev2), you end up with a three level hierarchy where Dev is a grandparent to Dev2).</p>\r\n<p>I would suggest using a differnt term (rather than virtual reparenting) in your scenario. You are inverting the hierarchy but you are not reparenting.</p>\r\n<p>In your scheduling question, if you have Parent -&gt; Child and you want to reparent Parent - what will be it's new parent?</p>\r\n<p>Regards,<br />Bill Heys<br />VS ALM Ranger</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-05-17T11:15:08.36-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "614191",
    "ThreadId": "257972",
    "Html": "<p>I like your term \"inverted hierarchy\" more than virtual reparenting.<br />I agree one-to-many should always flow from parent to children for conceptual consistency.</p>\r\n<p><strong>Current hierarchy: Prod</strong>-&gt;Main-&gt;Int-&gt;6+ Dev branches (+ others that are inactive or abandoned for months)<br /><strong>Planned hierarchy:</strong> Prod (and future release branches)&lt;-<strong>Main</strong>-&gt;Int-&gt;0 to 4(?) short-lived feature branches<span style=\"color: #800000;\">*&nbsp;</span><br /><span style=\"color: #800000;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * Short-lived branches should live for up to a few weeks, merge to parent, then be closed (deleted/obsoleted) after merge.</span></p>\r\n<p>&gt; what will be <em>&lt;Prod&gt;'s </em>new parent?<br />We're swapping Prod-&gt;Main to be Main-&gt;Prod.&nbsp;</p>\r\n<p style=\"padding-left: 30px;\">In the past we&nbsp;merged all release changes from Main to the current ancestor branch \"<strong>Prod</strong>\". Going forward we will create a separate new release branch from <strong>Main</strong> to avoid risk of merges introducing unexpected differences. We will treat the original Prod branch as our legacy release branch.</p>\r\n<p>We can either reparent Prod to officially make it a child of Main (instead of the parent of Main) or we can leave it with an inverted branch relationship and carefully maintain the Prod branch if we ever need to release a hotfix through the Prod branch.</p>\r\n<p>FYI: We release from 1 to 12 Web services and websites in each release. Per recent related discussion we plan to branch entire Main folder structure then make RC0 through release build(s) for just the related projects from the new release branch.</p>\r\n<p>From related <a href=\"http://tfsbranchingguideiii.codeplex.com/discussions/257869\" target=\"_blank\">Moving/renaming branches in TFS2010</a>&nbsp;I've got the answer to my initial question:</p>\r\n<p style=\"padding-left: 30px;\"><em>&gt;I see no particular reason why you can't logicall invert the relationship between parent and child (Q4).</em></p>\r\n<p>This conversation also helped me understand that I can logically invert the relationship but&nbsp;we should consider long-term confusion risk. it will be very easy to be confused a few years from now, especially if the Prod branch and Main branch get moved/renamed (which is the bigger part of our plan as discussed <a href=\"http://tfsbranchingguideiii.codeplex.com/discussions/257869\" target=\"_blank\">here</a>).</p>\r\n<p>&nbsp;</p>\r\n<p>I think I have the info I needed for this question. Anyone is welcome to continue posting here if they need any clarification on this discussion. Thanks again for all your posts Bill!</p>\r\n<p>Cheers - <em>ZephanS</em></p>",
    "PostedDate": "2011-05-17T13:08:09.4-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]