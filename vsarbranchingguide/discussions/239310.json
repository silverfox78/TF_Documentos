[
  {
    "Id": "539545",
    "ThreadId": "239310",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I am very new to this branching &nbsp;concept and try to understand.</p>\r\n<p>I am not able understand the difference between the Single release vs single team branching.&nbsp;</p>\r\n<p>Can someone help in knowing the difference</p>\r\n<p>In the single team branch, once a release is done and if a bug is reported are we supposed to fix the bug in the Main branch and forward&nbsp;integrate&nbsp;back to the DEV branch.</p>\r\n<p>Thanks<br>\r\nabe</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-12-22T12:58:05-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "539560",
    "ThreadId": "239310",
    "Html": "\r\n<p>Hi Abe,</p>\r\n<p>I like to think of branching for development separately from branching for release. The Main branch is where these two aspects of software development come together.</p>\r\n<p>Single Team branching is a development branching strategy. If you start with the Main branch and you want to begin development of the first (or next release) of a software application (or product, or system), then you would create a branch for development.\r\n If you have only a single team developing all of the features for this next release, you would only need a single development branch. You would branch Main -&gt; Development. Main would be the parent branch and Development would be a full child of Main. Generally\r\n you would branch the latest verision of Main when you do ths. When I use a shorthand notation for branching, I start with a $ to represent the root node of my Team Project Collection (in TFS 2010) or my server (in TFS 2008). The next would be the name of my\r\n Team Project (for example a Team Project, ABC would be $\\ABC in shorthand). If I have a branch, Main at the root of Team Project ABC, it would be $\\ABC\\Main. When I branch Main to Development I might represent this as $\\ABC\\Main -&gt; $\\ABC\\Development. In\r\n this example, Main is the parent of Development from a branch relationship perspective, but Main and Development would appear at the same level in Source Control Explorer under the Team Project</p>\r\n<p>ABC &lt;-Team Project<br>\r\n&nbsp;&nbsp;&nbsp; Main &lt; -branch<br>\r\n&nbsp;&nbsp;&nbsp; Development &lt;- branch</p>\r\n<p>Or I could have branched Main to Development in a slightly different way ($\\ABC\\Main -&gt; $\\ABC\\Dev\\Development). Note the extra node in this branch operation. This means that the branch, Development would be contained inside a folder, Dev, within Team\r\n Project ABC.</p>\r\n<p>ABC &lt;- Team Project<br>\r\n&nbsp;&nbsp;&nbsp; Main &lt;- branch<br>\r\n&nbsp;&nbsp;&nbsp; Dev &lt;- folder<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Development &lt;- branch</p>\r\n<p>In the preceding example, Main is still the parent, and Development is still a full child of Main.</p>\r\n<p>If you need to support multiple teams for development, you could create one or more additional development branches ($\\ABC\\Main -&gt; $\\ABC\\Dev\\Development2 and $\\ABC\\Dev\\Development3). Each of these additional development branches would be full children\r\n of Main and would therefore be siblings of each other.</p>\r\n<p>On the release side, Single release simply means I only need to support one current release of my software product (or system, or application). The Release branch is created from Main at the end of the development process, after the code has been stabilzed\r\n (in Main), passes QA Quality gates, and is deemed ready to ship. At this point, you branch Main to Release ($\\ABC\\Main -&gt; $\\ABC\\Release or $\\ABC\\Main -&gt; $\\ABC\\Release\\Release1).</p>\r\n<p>This would give you:</p>\r\n<p>ABC<br>\r\n&nbsp;&nbsp;&nbsp; Main<br>\r\n&nbsp;&nbsp;&nbsp; Dev<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Development1<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Development2<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Development3...<br>\r\n&nbsp;&nbsp; Release<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Release1</p>\r\n<p>If you need to support multiple releases, then you add complexity on the release side. For example you may have two Release branches (Release1, Release2) where you are actively doing bug fixes of released code, while at the same time your developmen team(s)\r\n is working on Release3. In this example, I use vCurrent to represent the latest production release (Release2), and vCurrent -1 to represent one prior release (Release1) that you need to support. And Release3 is vNext - being developed and not yet released.</p>\r\n<p>The bottom line you can have a very simple model (one Main, one Development, and one Release branch), or you can add complexity to the Development side (multiple feature teams) or you can add complextity to the release side (multiple Release branches). But\r\n adding complexity to the Development side does not necessarily mean you have to add complexity to the Release side and vice versa.</p>\r\n<p>Hope this helps,<br>\r\nRegards,<br>\r\nBill Heys<br>\r\nVS ALM Ranger<br>\r\n<br>\r\n</p>\r\n",
    "PostedDate": "2010-12-22T13:25:25.447-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "539572",
    "ThreadId": "239310",
    "Html": "\r\n<p>Thanks ...</p>\r\n<p>that was a great&nbsp;explanation.</p>\r\n<p>We are looking for the Single Release Plan.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-12-22T13:50:25.33-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "539579",
    "ThreadId": "239310",
    "Html": "\r\n<blockquote style=\"border:solid .1em #ccc; font-style:italic; margin:.25em 1em 0 1em; padding:0 .25em 0 .25em\">\r\n<strong>abrahamw77 wrote:</strong><br>\r\n<p>In the single team branch, once a release is done and if a bug is reported are we supposed to fix the bug in the Main branch and forward&nbsp;integrate&nbsp;back to the DEV branch.</p>\r\n&nbsp;</blockquote>\r\n<p>Again, separating Development from Release, bug fixing a shipped release is a Release question, not a question that is unique to single team (development) branching.</p>\r\n<p>Once you have shipped a release, and branched Main to a Release branch ($\\abc\\Main -&gt; $\\abc\\Release\\Release1), the Main branch is opened up for stabiling the *next* release (vNext or Release2).</p>\r\n<p>To fix a bug in the current release (vCurrent), you would make that fix in the Release branch ($\\abc\\Release\\Release1) and ship it from there. Then you could merge it back to Main (Reverse Integration) and then to Development (Forward Integration)</p>\r\n<p>Reverse Integration is always a merge from Child to Parent, while Forward Integration is always a merge from Parent to Child.</p>\r\n<p>Regards,<br>\r\nBill Heys<br>\r\nVS ALM Ranger</p>\r\n",
    "PostedDate": "2010-12-22T13:56:55.147-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]