[
  {
    "Id": "858104",
    "ThreadId": "362198",
    "Html": "\r\n<p><span style=\"color:black; font-size:10pt\">I am new to TFS and I have stepped into the position. I walked into an existing TFS branch structure as follows:</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">DEV-&gt; QA -&gt; UAT -&gt; STAGE</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">We have continuous builds with the help of CC.net for all branches.\r\n</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">Background: </span></p>\r\n<p><span style=\"color:black; font-size:10pt\">From my understanding this branch structure was conceived to prevent the release engineer from having to rebranch each release branch per release and instead all branches are continuous. Stage serves as both the\r\n service branch and production branch in the traditional branch structure seen below. UAT is used for our user testing and QA is similar to the main branch in the traditional branch structure below.\r\n</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">I understand that the standard in the industry is the following to allow the use of multiple concurrent releases:</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">Dev &lt;- Main -&gt; Service Branch -&gt; Release</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">But my question is if you utilize labels (in STAGE branch) with a continuous branch instead of branching per release does it save time from having to rebranch each release? I am finding that branching takes a fair\r\n amount of time to setup and reconfigure CC.net. Or maybe I am doing something the long/hard way, which I would appreciate some advice on how to make branching per release faster.\r\n</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">What are the flaws with this approach and do they outweigh the benefit of not having to rebranch each time?</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">Any advice is appreciated. But again I am new so if I am missing some underlying basics please inform me. Thank you for your help.\r\n</span></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-07-05T15:17:56.073-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "858490",
    "ThreadId": "362198",
    "Html": "<p>Labels are generally frowned upon since what comprises a label can be changed and there is no history.&nbsp; The benefit of having a release branch is it can be made read-only thus preserving the version of the release.&nbsp; This is important for auditing, for example.&nbsp; However, there is no right or wrong answer in how your branching should be setup.&nbsp; You should have a service&nbsp;pack&nbsp;branch if production issues cannot wait until the next full release.&nbsp; If this is never the case, then the service pack branch is not necessary.</p>\r\n<p>Another approach is to branch off of Stage to a Service Pack branch and then do a release branch off of SP.&nbsp; This way your integration builds will always point to a single Stage branch thus avoiding the configuration issues you are experiencing.&nbsp; The result will look like the following:</p>\r\n<p>DEV-&gt; QA-&gt; UAT-&gt; STAGE-&gt; SP-&gt; Release</p>\r\n<p>You would branch off of STAGE to new SP branches for each major release and maintain the single STAGE branch.&nbsp; You could either deploy to production from STAGE or SP.&nbsp; Release would be used for auditing only.</p>",
    "PostedDate": "2012-07-06T13:04:50.137-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "858513",
    "ThreadId": "362198",
    "Html": "<p>Thank you for the response bminisi.</p>\r\n<p>I'll try that out. =)</p>",
    "PostedDate": "2012-07-06T14:14:26.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "862262",
    "ThreadId": "362198",
    "Html": "<p>My preference is to start with Main. Branch from Main to Dev to start on the next release. You can deploy (rather than branch) from Dev to QA. After QA signoff, merge (RI) Dev to Main for stabilization. Deploy (not branch) from Main to QA, UAT etc. Once stabilized in Main branch for Release (and optionally Servicing.</p>\r\n<p>The branch structure for development: MAIN &gt; DEV.</p>\r\n<p>The branch structure for release: MAIN &gt; SP (Optional) &gt; RELEASE</p>\r\n<p>Bill Heys, VS ALM Ranger</p>",
    "PostedDate": "2012-07-12T14:09:56.987-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "869892",
    "ThreadId": "362198",
    "Html": "<p>Thanks Bill. This clarification helps. You guys are awesome!</p>",
    "PostedDate": "2012-07-16T10:18:33.597-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "902746",
    "ThreadId": "362198",
    "Html": "\r\n<p>Actually I will move this to a new discussion.</p>\r\n<p>We are a new Business Intelligence (BI) development team and whilst we are attempting to model a TFS branch plan that is easily manageable / automated I'm interested to hear how other in the Microsoft BI space are managing BI development through TFS.</p>\r\n<p>Our IT team have a comprehensive TFS Workflow and Branch management scheme in place for their OLTP development, the BI side still requires TFS but not with the same complexity, after all BI has to be very nimble yet thoroughly tested etc.</p>\r\n<p>Would love to hear thoughts on this.</p>\r\n",
    "PostedDate": "2012-08-22T16:19:43.253-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1011777",
    "ThreadId": "362198",
    "Html": "Hi Bill-\r<br />\n<br />\nI do love the simplicity of the strategy but i have a couple of questions I'm hoping you can help me with.\r<br />\n<br />\nAfter you deploy from DEV to QA or UAT, where do you start working on your next round of DEV changes?  Because, what if there are necessary changes to the UAT code?  Since there is no UAT branch, where would you do the changes so that they don't get jumbled with the next round of DEV?  Same goes for changes to RELEASE for emergency bug fixes but I assume that in this case you manually write the changes into RELEASE and into DEV.\r<br />\n<br />\nWe have a single release web site for our customers.  We do QA/UAT before releasing updates.  We do separate DEV while code is in QA/UAT.  My plan may involve a service branch but we may just do fixes in the RELEASE branch.\r<br />\n<br />\nA little bit of guidance here would be a huge help and much appreciated.<br />\n",
    "PostedDate": "2013-03-07T06:24:18.45-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]