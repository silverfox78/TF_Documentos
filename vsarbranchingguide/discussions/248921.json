[
  {
    "Id": "577414",
    "ThreadId": "248921",
    "Html": "\r\n<p>Hi All,</p>\r\n<p><br>\r\nI have a scenario I'd like some best practice advice on.</p>\r\n<p>We have a large public facing website.&nbsp; We have 3 development teams working on the website, each in their own project/feature branch, merged from a Main (or as well call it Trunk).</p>\r\n<p>This is all working well and apart from a project which does major re-organisation of the codebase the merge's are not to bad.&nbsp; We only merge from a development branch to the&nbsp;Main when that project is the next to be released to production.</p>\r\n<p>From Main we also have a Production branch, which represents what is currently in Production allowing us to perform hotfixes etc.</p>\r\n<p>The issue we have is we also have&nbsp;a UI team which make daily changes to content, javascript, css etc on the website.</p>\r\n<p>From our Production branch we have created a child branch called UI.</p>\r\n<p>The UI team work on TFS workitems and check in their code against a workitem.&nbsp; When a particular workitem is ready for production, all the files with all changesets associated with that workitem are released into production.</p>\r\n<p>The problem we have is then merging these changesets back to the Production branch.&nbsp; We fall into the scenario of cherry picking changesets and all the associated problems.&nbsp; Especially when multiple changesets linked to the same workitem have the\r\n same file.</p>\r\n<p>We cannot just select all UI branch changes and merge to production as not all of the inprogress work items actually have been released to production yet.</p>\r\n<p>Does anyone have any thoughts or suggestions on how best we should handle this scenario?</p>\r\n<p><br>\r\nThanks</p>\r\n<p>Rick</p>\r\n",
    "PostedDate": "2011-03-08T13:52:52.807-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "577490",
    "ThreadId": "248921",
    "Html": "<p>Hi Rick,</p>\r\n<p>This is a topic I am in the middle of blogging about. In my scenario, I have a Scrum project. A team has accepted a number of Product Backlog Items (PBIs) onto their Sprint Backlog (SBIs). At the beginning of the Sprint, based on their previous velocity, the team was confident they would be able to complete all of the SBIs in their backlog. However, towards the end of the Sprint, it becomes apparent that one or more of the SBIs will not be finished. The team will not be allowed to extend the Sprint, and they do not want to merge unfinished SBIs into their Main branch for release.</p>\r\n<p>As I see it, there are three options. If the Sprint team is developing on the same branch (for example, SprintBranch1), then there is not much choice at the end of the Sprint but to do the Cherry Picking merge from SprintBranch1 to Main of *only* the completed work (the finished SBIs, or user stories).</p>\r\n<p>There are a couple of alternatives that one can employ, but essentially this involves making a decision at the beginning of the Sprint to work differently. One approach, which I do not necessarily prefer, is that each member of the team will defer checking in changes for an SBI (or feature) until it is clear that this SBI will be finished before the end of the Sprint. Since we do not want to go for an extended period of time without getting these changes onto the server, we ask each member of the team to shelve their changes at the end of each day. This, at least, captures their changes on the server in the event that the Team member's laptop is stolen, or its hard drive crashes, etc.</p>\r\n<p>The alternative approach, which I tend to prefer, is to have each member of the Team working on their own development branch. If you have seven Team members and each one is working on one SBI at a time, you could have seven development branches (SprintBranch1 to SprintBranch7). Each Team member checks in their changes as they would normally. When they get to point that an SBI is complete and ready to be integrated with other completed features or SBIs for the Sprint, then you would merge (RI) this SBI from the SprintBranchx to Main. This would open up the SprintBranch for the next SBI on the backlog. Each member of the Team works in this fashion. When a feature or SBI is complete, it is merged (RI) to Main and then work continues in that branch on another feature. At the end of the Sprint, all of the completed features (SBIs) are merged to Main for release (as the incremental working increment of potentially shippable code). Any unfinished work remains in the Sprint branch and is carried over to the next (or a future Sprint).</p>\r\n<p>Both of these options require planning ahead and allowing for the possibility of unfinished features in a Sprint. One uses fewer development branches and relies on Shelving changes until a feature is complete. The second uses more branches for development and only merges a feature from a development branch to Main when the feature is complete.</p>\r\n<p>I prefer the second approach for a variety of reasons. First, it avoids cherry picking changes at the end of a Sprint which can be very challenging. How do you avoid picking too many changesets and / or too few. What happens if changes to more than one feature or SBI were checked in together and later we discover that one feature is completed and the other is not. How do you split a changeset to cherry pick only part of it.&nbsp; I often use the analogy of baking a cake. You follow the recipe (almost). In a bowl mix two cups of flour, one Cup of milk, two teaspoons of sugar, a half-teaspoon of salt, two teaspoons of baking powder and three eggs. Mix thoroughly. Wait. Now you discover you should only have added two eggs. How do you remove one egg from the cake batter after it is mixed in?</p>\r\n<p>The second option (more branches) will give you more granular changesets that allow you to track the progress of the project and feature more closely. Rather than having only one *big bang* changeset at the end of the feature's development, you have a normal progression of changesets that occur on a daily basis (or more frequently).</p>\r\n<p>I recently presented this approach to a group of developers at a conference. As a Certified Scrum Master I find that not many Scrum teams have thought the implications of Sprint teams, Sprints, and the possibility of unfinished features at the end of a Sprint. The implications on Source Control Managemt (SCM) have not been well understood in the Scrum community (Yet!!!)</p>\r\n<p>Although this scenario is somewhat different from yours, I think there may some suggestions here that help you.</p>\r\n<p>Regards,<br />Bill Heys<br />VS ALM Ranger</p>",
    "PostedDate": "2011-03-08T17:27:24.28-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]