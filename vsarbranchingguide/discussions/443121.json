[
  {
    "Id": "1041394",
    "ThreadId": "443121",
    "Html": "First, I'd like to thank you for the excellent documentation. It's proved invaluable lately.<br />\n<br />\nWe're responsible for deploying a web application that contains customizations (via a single compiled DLL). That is, many of our customers have very unique business rules which they cannot change, but which we do not wish to directly support in our product due to the added complexity and/or the limited marketability.<br />\n<br />\nOur web application is released about every two months (periodic release), but these customizations are developed, tested, deployed, fixed, tested again, redeployed (etc) as often as ten in one day.<br />\n<br />\nThe branch structure we're using is (somewhat simplified):<br />\n/Main<br />\n-/Source<br />\n--/BusinessObjectLayer<br />\n--/WebApplication<br />\n--/Customizations<br />\n<br />\nWe're currently using the standard branching plan in this fashion:<br />\nFeature Dev (opt) &lt;- Dev &lt;- Main -&gt; Release<br />\n(we will likely add the Service Pack strategy soon)<br />\n<br />\nEach of those branches is a branch of the Main/Source, so each branch contains its own copy of the Customizations project. That means Release1 has its own copy of Customizations, Release2 has its own copy, &amp;c. <br />\n<br />\nThis structure is causing some issues.<br />\n<br />\nOne issue is that, if a customer is on Release1 and discovers an issue with their customization code, developers are modifying that code IN THE RELEASE1 BRANCH. This isn't a huge deal, since we're a small team and they're responsible enough to not modify anything outside of that project, but I feel that it is only a matter of time before somebody slips up. Note that the Customizations project does NOT undergo QA.<br />\n<br />\nAnother issue is the merging problems. If a developer adds a new class file (customizations for our clients are stored in a unique namespace, classes separate the customizable bits by feature) to Release1, that results in a change to Customizations.csproj in that release. If another developer adds a new class file to the Customizations project in Release2, we now have multiple .csproj edits... often further confounded by some of the developers leaving the .csproj checked out for too long. When merging these changes (RI to main, then FI to latest release) Visual Studio often wants to delete items that shouldn't be deleted (I'm not at all sure what the root cause of that is). I <em>think</em> that disabling shared checkout on .csproj might alleviate much of this issue.<br />\n<br />\nFinally, we occasionally make edits (signature changes, etc) to the Customizations project and related objects in the other areas. That essentially ties the Customizations to a minimum version of the entire solution (I'm not certain that makes sense, please let me know if additional clarification is needed). This is not a problem currently (since each branch contains its own copy of the Customizations project), but will be important to consider when suggesting different approaches.<br />\n<br />\nAny thoughts on structuring this differently? Or could this be handled more easily with a bit of developer training and TFS configuration?<br />\n<br />\n[edited for spelling/grammar typos]<br />\n",
    "PostedDate": "2013-05-09T07:37:53.333-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]