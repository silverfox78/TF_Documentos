[
  {
    "Id": "1220414",
    "ThreadId": "538330",
    "Html": "Hi there<br />\nIn my team, we currently have a Main branch parent of 3 development branches (let's call them A, B, C), so here's the situation:<br />\n<br />\nMain -&gt; Dev A<br />\nMain -&gt; Dev B<br />\nMain -&gt; Dev C<br />\n<br />\nAs we like to keep our Main branch clean and always ready for the next release, we don't like the idea of merging directly to Main as we often have to do some more integration before the changes fully work. We would like to use the integration branch plan/pattern so that our situation would become:<br />\n<br />\nMain -&gt; Integ -&gt; Dev A<br />\nMain -&gt; Integ -&gt; Dev B<br />\nMain -&gt; Integ -&gt; Dev C<br />\n<br />\nThis way, integration changes would happen in the integration branch and be able to be FI to the children dev branches, as well as RI into Main when fully integrated. And Main would always be ready for release.<br />\n<br />\nTake note... We have ongoing changes happening in our 3 development branches, and they will not be part of the same release.<br />\n<br />\nHow exactly do I insert the Integration branch? I know about re-parenting and baseless merges, but I'm not sure in which order and from which to which I should be doing things, without risking losing changes or integrating too much of them in the wrong branches.<br />\n<br />\nThanks for your help!<br />\n",
    "PostedDate": "2014-03-07T11:33:26.3-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1220509",
    "ThreadId": "538330",
    "Html": "Hi,<br />\n<br />\nWe follow a little deviated process from the Guide and I thought to share the same with you. We use the MAIN branch for QA/Test and the Integration branch for Developer testing (Developer Inegration Testing actually). That gives us  required isolation between deliveries to Test team and Developer Integration testing. It frees the Integration test branch when QA/Test team are testing on a particular branch. Had we used the Integration branch for QA/Test team testing, then the branch would be 'in use' as they might need to perform GETs several times and the codebase should not be changed during that time. This would have disturbed the velocity of the Feature development team as during that test time they cannot do Integration testing of their further developments.<br />\n<br />\nSo in our case Main is not 'Always Ready' for release, rather the QA/Test stabilization is done on Main and Development stabilization is done on Integration. Once Main is stabilised, we release a version and cut out a Release branch for future support.<br />\n<br />\nWhen you said you have only 3 development branches, I thought I should ask you whether you are developing multiple features in one branch.<br />\n<br />\nIt is not necessary that you have only one feature being developed in Dev 1 or Dev 2, they can contain set of cohesive features (that can be built and delivered together) but please be careful that if you are developing multiple features in one Dev branch then again you are taking a risk where incompleteness of one feature can delay the release of the other complete feature. At release time, it is difficult to separate features in the same source branch. So take a wise judgement when deciding if multiple features are to be developed in one Dev branch. We have faced this problem and moved to One Feature - One Branch model to provide complete isolation of feature code.<br />\n<br />\nOur process is as below - <br />\n<ol>\n<li>Develop in Dev branch</li>\n<li>FI from Integration branch (to have changes committed by other Dev branches and resolve conflicts locally rather than disturbing Integration branch)</li>\n<li>RI to Integration branch</li>\n<li>GET from Integration branch to Developer Integration test area/machine</li>\n<li>If succeeds, then RI to MAIN</li>\n<li>Test team performs GET and builds from MAIN.</li>\n<li>If test succeeds, MAIN becomes stable</li>\n<li>When it is time to release, just focus on stabilising MAIN and perform changes directly to MAIN if necessary. Once we make such changes FI the same to relevant Dev branches</li>\n<li>When MAIN is stable, release the version and cut out a release branch (e.g. Release 1.2.2) for future support.</li>\n<li>Do a FI from MAIN to Integration branch.</li>\n<li>\nAt this point you can retire the old Dev 1/2/3 branches and delete them or can continue with them for future developments. It is recommened that you delete and create fresh Feature branches from Integration (e.g. Dev 4/5/6). However, if you choose to continue with Dev 1/2/3 then at this point you must perform another FI from Integration to Dev 1/2/3. You are also taking risks of any 'aborted' developments in these branches being retained in the branch which in future might sneak into the Integration branch.<br />\n</li>\n</ol>\nFor creating a new Integration branch and making it the parent of the Dev branches is easy. I guess you will figure it out by the tool docs. I believe the steps should be like <br />\n<ol>\n<li>Make sure all code in MAIN are checked in.</li>\n<li>Create an Integration branch from MAIN (it becomes a clone of MAIN).</li>\n<li>\nAssuming that the parent of the Dev branches are currently MAIN, Set the 'Parent' of the Dev 1/2/3 branches to Integration. It will not make any difference as Integration is currently a clone of MAIN.<br />\n</li>\n</ol>\nYou are now ready to go with the new hierarchy.<br />\n<br />\nHope this helps.<br />\n<br />\nPlease feel free to discuss/ask questions.<br />\n<br />\nRajarshi Basu Roy<br />\n",
    "PostedDate": "2014-03-07T22:24:16.5-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1222463",
    "ThreadId": "538330",
    "Html": "Yes, this is pretty similar to what we want to achieve.\r<br />\n<br />\nHowever, my problem is the way to get there with branches already existing and with many differences between them.\r<br />\n<br />\nUnfortunately, it is not possible to do as you suggest:<br />\n<blockquote>\n1.Make sure all code in MAIN are checked in. <br />\n2.Create an Integration branch from MAIN (it becomes a clone of MAIN). <br />\n3.Assuming that the parent of the Dev branches are currently MAIN, Set the 'Parent' of the Dev 1/2/3 branches to Integration. It will not make any difference as Integration is currently a clone of MAIN.<br />\n</blockquote>\nThe new branch created under MAIN will not appear as choice in the re-parent dialog for the other dev. branches. You would have to perform baseless merges for that, but that's where we're getting scared mixing the wrong changes.\r<br />\n<br />\nSo, anybody has a better description of what has to be done to get there?<br />\n",
    "PostedDate": "2014-03-13T11:10:24.437-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]