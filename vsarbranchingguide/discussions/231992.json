[
  {
    "Id": "511212",
    "ThreadId": "231992",
    "Html": "\r\n<p>On my web application, I have it setup to work with the local Internet Information Services (IIS) instead of the development IIS server.&nbsp; This is done because of the differences in the way they handle security.&nbsp; I have 3 branches for my applicaiton,\r\n Main, Development and Release.&nbsp; Traditionally I have three websites on my development computer to house the three websites.&nbsp; I have used\r\n<a href=\"http://localhost:8081\">http://localhost:8081</a>, <a href=\"http://localhost:8082\">\r\nhttp://localhost:8082</a>, and <a href=\"http://localhost:8083\">http://localhost:8083</a>. The issue I am running into is that when I make a change to my project and merge it, the IIS settings are being overwritten.&nbsp; These settings are kept in the csproj\r\n file in the IISUrl node.&nbsp; (&quot;&lt;IISUrl&gt;http://localhost:8081/&lt;/IISUrl&gt;&quot;).&nbsp; Is there a way to keep the branches from overwriting this setting?&nbsp; Or is there a mechanism like Web.Config Transformation that works with the project files?</p>\r\n<p>Thanks.</p>\r\n",
    "PostedDate": "2010-10-22T10:06:53.693-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "574958",
    "ThreadId": "231992",
    "Html": "<p>We have this issue too. What we do is only use one virtual directory and keep changing its settings in IIS to point to the branch we are using at the time. Generally though this is a PITA and it would be great if MS could come up with a better solution.</p>\n<p>Here is a .bat file that can be used to do this easily, I'm sure this could be&nbsp;altered to do the&nbsp;site's location as well&nbsp;(remember to run&nbsp;as Administrator):</p>\n<p>@echo off</p>\n<p>:input<br />echo .<br />echo&nbsp;1: Development<br />echo&nbsp;2: Release Phase 1<br />echo&nbsp;3: MAIN<br />echo Q: Quit</p>\n<p>set INPUT=<br />set /P INPUT=Select branch: %=%</p>\n<p>if \"%INPUT%\"==\"1\" goto Development<br />if \"%INPUT%\"==\"2\" goto Release1<br />if \"%INPUT%\"==\"3\" goto Main<br />if \"%INPUT%\"==\"Q\" exit<br />if \"%INPUT%\"==\"q\" exit</p>\n<p>:err<br />Echo Input Error (%INPUT%)<br />goto Input</p>\n<p>:Development<br />echo Setting up Development...<br />%WINDIR%\\System32\\inetsrv\\appcmd set VDIR /vdir.name:\"Default Web Site/MySite/\" /physicalPath:\"C:\\Users\\martin.brown\\Documents\\Visual Studio 2010\\Projects\\MySite\\Development\\Web\"<br />goto end</p>\n<p>:Release1<br />echo Setting up Release Phase 1...<br />%WINDIR%\\System32\\inetsrv\\appcmd set VDIR /vdir.name:\"Default Web Site/MySite/\" /physicalPath:\"C:\\Users\\martin.brown\\Documents\\Visual Studio 2010\\Projects\\MySite\\Release\\Phase1\\Web\"<br />goto end</p>\n<p>:Main<br />echo Setting up Release Main...<br />%WINDIR%\\System32\\inetsrv\\appcmd set VDIR /vdir.name:\"Default Web Site/MySite/\" /physicalPath:\"C:\\Users\\martin.brown\\Documents\\Visual Studio 2010\\Projects\\MySite\\Main\\Web\"</p>\n<p>:end<br />goto input</p>",
    "PostedDate": "2011-03-03T04:53:45.367-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "611088",
    "ThreadId": "231992",
    "Html": "<p>Thanks for the VDIR redirect script fragment mqbrown. I was aware of this concept but hadn't researched how to implement it. Very handy for quick redirect of one or more services.</p>\r\n<p>1. Microsoft Web Deployment Projects support the concept of build-specific config file sections. You build for desired target environment and you get related config files as part of the build process. This has benefits and drawbacks. I personally don't like this approach because as a tester I want one build that can be deployed anywhere without rebuilding or using a different build with chance of unintended differences (hence requiring some re-testing to verify each build variation is functionally equivalent).</p>\r\n<p>Another option is to check-in web.config and other environment-specific settings for a default dev environment deployment, then use a script to replace default environment settings&nbsp;with target environment values. Default deployment needs no changes, and other environments use a standard post-deployment configuration script based on a \"single source of truth\" XML/spreadsheet of environment-specific values (which is also checked in). This is the approach my team is taking.</p>\r\n<p>For post-deployment configuration there are several tools that may come in handy:</p>\r\n<ol>\r\n<li><strong>regex </strong>(regular expressions) are built into PowerShell (.NET regex syntax), Perl, and other script languages. A set of regex expressions read from an XML file (which PowerShell and some other scripts can easily parse) could be used to transform default environment settings to match target environment.</li>\r\n<li><strong>XMLPreProcess </strong>is a codeplex project that stores environment-specific variables in an XML file then alters Web.config or other XML files depending on -env parameter passed. </li>\r\n</ol>\r\n<p>I have a custom script that implements combination functionality of the above public tools, but I haven't adapted it to my team's current projects because I'm looking for more publically supported solution for this common requirement.</p>\r\n<p>I'm sure there are more (possibly better tools) publicly available. <br /><em><strong>ALL: </strong>If you know of other tools and solutions please reply with name and your experience (good, bad, or haven't tried it)!</em></p>",
    "PostedDate": "2011-05-11T10:54:00.96-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]