[
  {
    "Id": "689476",
    "ThreadId": "277234",
    "Html": "\r\n<p>Hi all, we need a little guidance on our branching setup</p>\r\n<ul>\r\n<li>We have a single client who always uses our latest code. </li><li>We have a maintenance team who makes about 5-10 software releases throughout the year.&nbsp; (5 developers)\r\n</li><li>The maintenance team may also need to make an emergency fix to a release at any point in time (happens 2-3 times per year)\r\n</li><li>We have a development team who makes a major release every year or two. (12 developers)\r\n</li></ul>\r\n<p>I am thinking we use something like the the Basic Branch plan.</p>\r\n<p>Main Branch</p>\r\n<ul>\r\n<li>built daily, </li><li>no direct check ins. </li><li>base fo all other branches </li></ul>\r\n<p>Release Branches</p>\r\n<ul>\r\n<li>For the maintenance team. </li><li>Based on Main Branch, </li><li>CI Build, </li><li>New Branch for each version of code. </li><li>Pushes to Main every couple of days when code is stable. </li><li>Production release direct from the release branch </li><li>Branch is made read only after release </li></ul>\r\n<p>Development Branch</p>\r\n<ul>\r\n<li>for the development team.&nbsp; </li><li>Based on Main Branch, </li><li>CI Build.&nbsp; </li><li>FMerge updates from Main every day or two </li><li>When ready to release,&nbsp;they get latest production release from Main; their branch will effectively become a release branch\r\n</li></ul>\r\n<p>Questions:</p>\r\n<p>(1) any improvements to the above setup for our sceanrio?</p>\r\n<p>(2) who does the mergeing between branches the developers or the config manager?</p>\r\n<p>(3) we might have a couple of maintenance releases on the go at once and require a fix to the current deployed release.&nbsp; E.g.</p>\r\n<p>1.3 is in production.&nbsp; Release branch 1.3 is read only<br>\r\n1.4 is under development by the maintenace team with most items being QA tested<br>\r\n1.5 is under development</p>\r\n<p>In this case, we need to make a fix to the 1.3 branch that has the software in production - do we open that old branch, fix and release&nbsp;or create a new one?</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-10-26T01:58:47.643-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "689586",
    "ThreadId": "277234",
    "Html": "<p>I agree with almost all of your points.</p>\r\n<p>With respect to the Development branch, when ready to release.:</p>\r\n<ul>\r\n<li>Merge (Forward Integration) from Main to Development. Resolve any integration conflicts in the development branch.</li>\r\n<li>Merge (Reverse Integration) from Development to Main - stabilize the code in Main (deploy from Main to QA environment)</li>\r\n<li>When Main is ready to release, branch Main to a new Release branch</li>\r\n<li>Release from the Release branch</li>\r\n</ul>\r\n<p>With respect to who does merging, it should be someone who is familiar with the code so they can resolve merge conflicts effectively and correctly. This could be a developer, team lead, configuration manager.</p>\r\n<p>If you have the need for post-release sustained engineering (your last question), you might consider the standard branch plan, where you have a servicing branch between Main and the Release branch (for release 1.3, for example). This allows you to keep the release branch read-only while having a branch available for hot fixes.</p>\r\n<p>Regards,<br />Bill Heys<br />VS ALM Ranger</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-10-26T06:09:01.197-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "689593",
    "ThreadId": "277234",
    "Html": "<p>With respect to your description of the Release branches:</p>\r\n<p>You create the Release branch for a new version after it has been stabilized in Main. When this branch is created, it is made read-only. Therefore, there is no need to have CI builds on this branch. You also do NOT merge again from Main to Release after the Release branch is created. This is an important concept. If you just released version 1.3, Main might be used to stablize version 1.4. Since Main has a different version of the code from the 1.3 release branch, merging from Main to Release 1.3 will *pollute* the vCurrent Release branch with vNext code.</p>\r\n<p>The important point here is one of timing. The scenario you describe suggests creating a release branch and *then* stablizing the code. The scenario I describe stabilizes the code in Main and *then* creates the Release branch.</p>\r\n<p>I am a little confused by the distinction you make between version 1.4 (changes made by the maintenance team) and version 1.5 ( changes made by the development team). As I see it, the maintenance team makes emergency hot fixes to release 1.3 in a servicing branch for version 1.3. The devlopment team would be developing vNext (release 1.4).</p>\r\n<p>Regards,<br />Bill Heys<br />VS ALM Ranger</p>",
    "PostedDate": "2011-10-26T06:16:52.943-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "689685",
    "ThreadId": "277234",
    "Html": "<p>Bill, thank you very much for the quick reply.&nbsp; I like your ideas for the development branch.&nbsp; They will work for us.</p>\r\n<p>To help clarify - we have two teams:</p>\r\n<ol>\r\n<li>Maintainers who&nbsp;work only in the release branches.&nbsp;They do minor releases/fixes every couple of months.&nbsp; </li>\r\n<li>Developers working on a major new release.&nbsp; These developers work in the developer branch.&nbsp; THey release code once every year or so.</li>\r\n</ol>\r\n<p>&nbsp;</p>\r\n<p>I'll try to stay away from words that confuse the two.</p>\r\n<p>Our intention is that a release branch is (e.g. 1.1) is created from Main read write, whereby the ï»¿maintainers do a&nbsp;series of bug fixes and small features. The maintainers check in their code to the release branch.&nbsp; Since there are up to 5 maintainers writing code in the release branch it would be worth while to have CI and test on this branch.&nbsp; This release branch would periodically update Main when the code was stable (e.g. when there is a release for QA).&nbsp; When the last change is made in the Release branch, we use the last build for production (which has been fully tested) and make the release branch read only. For audit and compliance.</p>\r\n<p>Sometimes we will have two releases branch in play.&nbsp; To further the sample above (with improved wording):&nbsp;</p>\r\n<ul>\r\n<li>Release 1.3 is in production so the release 1.3 branch is read only. </li>\r\n<li>Release branch 1.4 might have most of&nbsp;the work completed&nbsp;perhaps being in its&nbsp;user testing cycle.&nbsp; It is still read/write and some of the maintainers are doing work in here.</li>\r\n<li>A new release 1.5 branch might be starting with new future small features and bug fixes.&nbsp;&nbsp; It is read write and maintainers are actively checking code into this branch.</li>\r\n</ul>\r\n<p>In this case, the 1.4 release branch continues to update Main (as changes are verified)&nbsp;and release 1.5 branch pulls from Main.&nbsp; The release 1.5 branch will not push to Main until after release 1.4 is complete and in production.</p>\r\n<p>&nbsp;</p>\r\n<p>Does this clarify things?&nbsp; Can we make improvements to this idea?</p>\r\n<p>&nbsp;</p>\r\n<p>thanks again for the help</p>\r\n<p>Don</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-10-26T08:30:40.197-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "689699",
    "ThreadId": "277234",
    "Html": "<p>Here is my suggestion:</p>\r\n<p>In the standard branch plan, on the release side, you have two branches per release (for example v1.3 or vCurrent).</p>\r\n<p>Both of these branches are created at the same time (Main -&gt;Servicing; Servicing-&gt; Release). This structure allows for post-release engineering of *unplanned* fixes. These fixes would be made (checked-in) to the Servicing branch, tested and released from this branch. Since they are minor fixes and emergency hot fixes, it is not necessary to make a read-only copy of every emergency release done here. The Release branch would be made read-only immediately after it is created. There would be no merging from Main to any release branches or servicing branches. Hot fixes, on the other hand, would be merged back to main (Reverse Integration) so they could be picked up by vNext development.</p>\r\n<p>Rather than look at v1.4 as a release effort, I would prefer to characterize this as a development branch. This means you would have two development branches, vNext (1.4) ande vNext +1 (1,.5). These two development branches would be siblings. It is a minor distinction perhaps, but I think it more clearly depicts what is going on. Unplanned bug fixes to released code would be checked into a servicing branch for the appropriate release. Planned maintenance work would be checked into a development branch (vNext). Future development would be checked-into a different development branch (vNext +1`).</p>\r\n<p>This approach allows you to maintain stable branches in Main and Release. I think the workflow you describe is not impacted by this semantic change for the Release 1.4 branch. It continues to be read/write with CI. It will periodically merge back to Main so the vNext +1 branch can pick up these changes from Main.</p>\r\n<p>Until they release, 1.4 and 1.5 should be considered development branches. When ready to release, do a final merge of v1.4 development to Main (after merging Main to v1.4 and testing the integration in the v1.4 development branch). Do a final QA stabilization of v1.4 in Main and then make the two relase branches (servicing and release). Make the release branch read only.</p>\r\n<p>Later when v1.5 is ready to release follow the same process as for v1.4.</p>\r\n<p>I hope this helps.</p>\r\n<p>Regards,</p>\r\n<p>Bill Heys<br />VS ALM Ranger</p>",
    "PostedDate": "2011-10-26T08:54:11.313-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "689862",
    "ThreadId": "277234",
    "Html": "<p>Bill, now I understand.&nbsp; I reviewed this with the team leads and we are in complete agreement - thank you very much the help.</p>",
    "PostedDate": "2011-10-26T13:32:49.197-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]