[
  {
    "Id": "749560",
    "ThreadId": "300610",
    "Html": "\r\n<p>I read the branching guidance and found it very explanatory and helpful.</p>\r\n<p>I have an existing Visual Studio &quot;monolithic&quot; project that I want to place under version control now that we have a TFS server available. The problem with the existing project is that it started off as one of those infamous &quot;we'll write this and only use\r\n it once&quot; utilities which is now in full-time service.</p>\r\n<p>Because the original code was meant to be thrown away, all of the project's components are in a single solution in a single project (i.e. the data access, the UI, and custom&nbsp;UI components/controls).</p>\r\n<p>The code at this point is fairly stable with only one more planned addition. However, this addition could result in some breaking changes (due to the nature of the earlier code being throw-away, loose-coupling was not a design goal at first, but is now necessitated\r\n by this latest change). In addition, obviously I would like to refactor the solution structure by splitting out the various concerns into separate projects, e.g. a data access project, a custom components and controls DLL project, as well as the main application\r\n project, at least.</p>\r\n<p>As far as branching is concerned, I think we'll stick with the Development&lt;-&gt;MAIN&lt;-&gt;Service-&gt;Release structure.</p>\r\n<p>My questions are:</p>\r\n<ol>\r\n<li>Is it better to bring this solution and project into TFS now, before restructureing, and then restructure?\r\n</li><li>Or should I restructure first, fixing anything that breaks and then place the restructured solution under TFS?\r\n</li></ol>\r\n<p>If #1 is a viable option, is there any guidance/documentation/best practices&nbsp;available regarding the scenario of bringing an existing codebase under source code control?</p>\r\n<p>Thanks.</p>\r\n<p>CS</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-02-09T12:04:59.697-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "749650",
    "ThreadId": "300610",
    "Html": "<p>Ha, it seems that all it takes is the right keywords in your search and you get the answers you're looking for. In this case, \"restructure\" was the right keyword (vs. split).</p>\r\n<p>Anyway, this question was posed on an MSDN forum, and the answer turned out to be---surprise, surprise---branch!</p>\r\n<p>The gist was, get your project into TFS--creating the MAIN branch with the current codebase. Then branch again, perform your restructuring, and merge back to MAIN once everything is stable.</p>\r\n<p>Above, I said I wanted the structure Development&lt;-&gt;MAIN&lt;-&gt;Service Release-&gt;RTM. I would have an additional branch called Restructure, which would dead-end as soon as it is merged back into MAIN. I could do one of two things with this branch once I've completed restructuring:</p>\r\n<ol>\r\n<li>Delete it. This will not remove history, but will prevent any other branches or check-ins from occurring on that branch. This is OK if I'm sure I'll never need to restructure again, or if I do need to restructure again, I want to use a separate branch.</li>\r\n<li>Keep it around, but mark it as read-only until if/when I restructure again.</li>\r\n</ol>\r\n<p>Personally, I hope I'll never restructure again, but I think I'll take option 2 anyway, as it's more transparent to me and provides more of a visible \"audit trail\" of what occurred to the code between the time it was originally placed under source control and subsequently had a merge back into MAIN.</p>\r\n<p>Regards,</p>\r\n<p>CS</p>",
    "PostedDate": "2012-02-09T12:28:05.367-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "749919",
    "ThreadId": "300610",
    "Html": "\r\n<div>I am glad you found your answer. </div>\r\n<div>Any reason you don't simply do the restructuring in your dev branch? I see no harm in having the Restructure branch. But I don't see why you would need it.\r\n</div>\r\n<div>Regards,</div>\r\n<div>David Allen<br>\r\n<br>\r\nSent from my iPhone</div>\r\n<div><br>\r\nOn Feb 9, 2012, at 2:28 PM, fourpastmidnight &lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt; wrote:<br>\r\n<br>\r\n</div>\r\n<div></div>\r\n<blockquote type=\"cite\">\r\n<div>\r\n<p>From: fourpastmidnight</p>\r\n<div id=\"ThreadNotificationPostBody\">\r\n<p>Ha, it seems that all it takes is the right keywords in your search and you get the answers you're looking for. In this case, &quot;restructure&quot; was the right keyword (vs. split).</p>\r\n<p>Anyway, this question was posed on an MSDN forum, and the answer turned out to be---surprise, surprise---branch!</p>\r\n<p>The gist was, get your project into TFS--creating the MAIN branch with the current codebase. Then branch again, perform your restructuring, and merge back to MAIN once everything is stable.</p>\r\n<p>Above, I said I wanted the structure Development&lt;-&gt;MAIN&lt;-&gt;Service Release-&gt;RTM. I would have an additional branch called Restructure, which would dead-end as soon as it is merged back into MAIN. I could do one of two things with this branch once I've completed\r\n restructuring:</p>\r\n<ol>\r\n<li>Delete it. This will not remove history, but will prevent any other branches or check-ins from occurring on that branch. This is OK if I'm sure I'll never need to restructure again, or if I do need to restructure again, I want to use a separate branch.\r\n</li><li>Keep it around, but mark it as read-only until if/when I restructure again. </li></ol>\r\n<p>Personally, I hope I'll never restructure again, but I think I'll take option 2 anyway, as it's more transparent to me and provides more of a visible &quot;audit trail&quot; of what occurred to the code between the time it was originally placed under source control\r\n and subsequently had a merge back into MAIN.</p>\r\n<p>Regards,</p>\r\n<p>CS</p>\r\n</div>\r\n</div>\r\n</blockquote>\r\n",
    "PostedDate": "2012-02-09T13:52:51.05-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "750899",
    "ThreadId": "300610",
    "Html": "<p>David:</p>\r\n<p>Well, I guess&nbsp;two reasons.&nbsp;One, the code was stable in its current form. Two, up until now, all the code had been developed outside of any source code control. Therefore, I had no development branch or even a main branch!</p>\r\n<p>So my thought process was:</p>\r\n<ol>\r\n<li>Since the code, in its current&nbsp;structure,&nbsp;is stable, then the current codebase should serve as my \"main\" branch. If I did no restructuring, then development branches would be based off of this codebase, which is now Main.</li>\r\n<li>While I could have created a \"devolpment\" branch or some sort of version branch in which to perform the restructuring, I felt that creating a Restructure branch made it clear that this particular branch was a major restructuring of the existing codebase; no development or refactoring was done in this branch aside from adding namespaces and references to various (new) projects and existing code files. In fact, I'm not even considering this restructuring a \"new version\", per se. It is simply a re-arrangement of the existing codebase.</li>\r\n</ol>\r\n<p>Once the changes in Restructure are complete and the project is once again compiling with no errors, I will merge Restructure back into Main.&nbsp;Effectively, the&nbsp;Restructure branch will&nbsp;replace my \"stable\" Main branch,&nbsp;becoming my new Main branch codebase on which all other developmental releases will be based.</p>\r\n<p>Anyway, I guess it's a matter of preference; and the intent expressed by this structure seemed more clear to me.</p>\r\n<p>Thanks.</p>\r\n<p>CS</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-02-09T20:05:12.973-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]