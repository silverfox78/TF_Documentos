[
  {
    "Id": "703396",
    "ThreadId": "280837",
    "Html": "\r\n<p>On page 11 of the TFS_Branching_Guidance_Main_2010_v1.pdf that is part of the download, it is written</p>\r\n<p></p>\r\n<div><span style=\"font-size:x-small\">\r\n<p style=\"padding-left:30px\"><em>2. RELEASE branch where you ship your major release from.</em></p>\r\n</span></div>\r\n<p></p>\r\n<p><span style=\"font-size:x-small\"></p>\r\n<p></p>\r\n<p style=\"padding-left:60px\"><em>a. RELEASE is a child branch of MAIN.</em></p>\r\n<p></p>\r\n<p style=\"padding-left:60px\"><em>b. Your major product releases from the RELEASE branch and\r\n<span style=\"color:#008000\">then RELEASE branch access permissions are set to read only</span>.</em></p>\r\n<p style=\"padding-left:60px\"><em>c. <span style=\"color:#800080\">Changes from the RELEASE branch merge (RI) to MAIN</span>. This merge is one way. Once the release branch is created MAIN may be taking changes for next version work not approved for the release\r\n branch</em></p>\r\n<p></p>\r\n<p style=\"padding-left:60px\"><em>d. Duplicate RELEASE branch plan for subsequent major releases.</em></p>\r\n<p></p>\r\n<p><span style=\"font-size:x-small\">&nbsp;</span>&nbsp;</p>\r\n<p></p>\r\n<p></p>\r\n</span>\r\n<p></p>\r\n<p>The two phrases I show in color above seem to contradict each other. They seem to describe two mutually exclusive ways of managing the release branch. if I set the RELEASE branch to read-only as suggested in 2.b, then I cannot make changes to the RELEASE\r\n branch implied in 2.c.&nbsp;&nbsp; It seems to me&nbsp;that the basic branch plan should NOT set the release branch to read-only. Instead, the Release branch is used to develop and deploy hot fixes while future development is done in DEVELOPMENT branch.&nbsp;\r\n Setting the RELEASE branch to read-only seems compatible with the requirement &quot;<span style=\"font-size:x-small\">to have an accurate snapshot of your sources at release time.&quot;&nbsp; That is described in the Standard Plan. But I would not include that in the\r\n Basic plan. I would keep the Basic plan as simple as possible.&nbsp; I believe doing hot fixes in a release branch is the simplest way to support production while allowing development to proceed elsewhere.</span></p>\r\n<p>&nbsp;</p>\r\n<p>However, if one DOES want to lock down the RELEASE branch, then I would reorder the items above.&nbsp; The problem is that this can be read as instructions to be followed in order, or as general principles.&nbsp; As principles, there is not a problem.&nbsp;\r\n But if we take the items a-d in order, as most readers will do, then they will experienced this &quot;inconsistency.&quot;&nbsp; Instead,&nbsp;if we reverse b and c, and first say that when we make the release branch, we might have a few ship-stopping defects to repair\r\n in the release branch, then we stabilize it and release it, THEN we lock it down and reverse integrate to MAIN - then it would have made sense. But to a newcomer, I fear the order of the items implies order of execution rather than a list of goals.</p>\r\n<p>By the way, If you happen to rewrite this for a future version (like TFS 2011), or produce other items,&nbsp;I would be glad to review them in draft form to help&nbsp;identify points of confusions. I am easily confused so I am a great asset in this regard\r\n ;)</p>\r\n",
    "PostedDate": "2011-11-25T07:27:06.06-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "703421",
    "ThreadId": "280837",
    "Html": "<p>David,</p>\r\n<p>Yes, I agree that these statements are contradictory. As we review the guidance for the next release we should elaborate on these rule somewhat.</p>\r\n<p>Not everyone will need or want to make their RELEASE branch read-only. We recommend this approach particularly when audit or regulatory requirements impose the need to have an archived copy of each major release shipped to customers. Clearly, as you note, when the RELEASE branch is made read-only, there will not be any changes checked into this branch, and thus there will be no need to merge changes from RELEASE to MAIN.</p>\r\n<p>The larger point here is that, once you create a RELEASE branch, you should not merge ANY changes from MAIN into the RELEASE branch. At the time of release, when the RELEASE branch is created, MAIN is now opened up for vNext development. Merging changes in MAIN forward into an existing RELEASE branch will pollute a vCurrent Release branch with vNext changes that are likely not tested thoroughly.</p>\r\n<p>I you want to make servicing changes in the RELEASE branch, then you would not make it read-only or you would use the Standard or Advanced branch plan which provides for a Servicing (SP or Hotfix) branch between MAIN and RELEASE. In these branch plans, changes would be possible in the Servicing branch(es) but not in a read-only RELEASE branch. The same restriction applies to the Servicing branch. You can merge changes from Servicing to MAIN (Reverse Integration), but you should not merge changes from MAIN (vNext) into Servicing branches (vCurrent).</p>\r\n<p>As for ship-stopping defects requiring additional stabilization, this should ideally occur in MAIN before branching for RELEASE. This eliminate the need to RI changes back to MAIN from RELEASE.</p>\r\n<p>Finally I would agree that when bulleted items are numbered or lettered, an order is implied. Perhaps we should use simple bullets in addition to clearer explanations.</p>\r\n<p>Regards,<br />Bill Heys <br />VS ALM Ranger</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-11-25T08:58:47.913-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]