[
  {
    "Id": "580193",
    "ThreadId": "249641",
    "Html": "\r\n<p>Greetings,</p>\r\n<p>Based on the wonderful TFS Branching Guide 2010 (thanks ALM Rangers), I have created a team project structure for a common code library team project with a single dependent team project (a portal application).&nbsp; I followed the vanilla basic branch scheme\r\n pretty closely.&nbsp; Here is what it looks like:</p>\r\n<p><strong>TeamProject Portal</strong><br>\r\n|<br>\r\n-&gt;BuildProcessTemplates<br>\r\n|<br>\r\n-&gt;Development<br>\r\n&nbsp; |<br>\r\n&nbsp; -&gt;DevMain<br>\r\n&nbsp;&nbsp;&nbsp; |<br>\r\n&nbsp;&nbsp;&nbsp; -&gt;Source<br>\r\n|<br>\r\n-&gt;Main<br>\r\n&nbsp; |<br>\r\n&nbsp; -&gt;Source<br>\r\n|<br>\r\n-&gt;Releases<br>\r\n&nbsp; |<br>\r\n&nbsp; -&gt;PortalV1<br>\r\n&nbsp;&nbsp;&nbsp; |<br>\r\n&nbsp;&nbsp;&nbsp; -&gt;Source<br>\r\n|<br>\r\n-&gt;Shared<br>\r\n&nbsp; -&gt;Framework<br>\r\n&nbsp;&nbsp;&nbsp; -&gt;Bin<br>\r\n&nbsp;&nbsp;&nbsp; -&gt;Source<br>\r\n<br>\r\n<br>\r\n<strong>TeamProject Framework</strong><br>\r\n|<br>\r\n-&gt;BuildProcessTemplates<br>\r\n|<br>\r\n-&gt;Development<br>\r\n&nbsp; |<br>\r\n&nbsp; -&gt;DevMain<br>\r\n&nbsp;&nbsp;&nbsp; |<br>\r\n&nbsp;&nbsp;&nbsp; -&gt;Bin<br>\r\n&nbsp;&nbsp;&nbsp; |<br>\r\n&nbsp;&nbsp;&nbsp; -&gt;Source<br>\r\n|<br>\r\n-&gt;Main<br>\r\n&nbsp; |<br>\r\n&nbsp; -&gt;Bin<br>\r\n&nbsp; |<br>\r\n&nbsp; -&gt;Source<br>\r\n|<br>\r\n-&gt;Releases<br>\r\n&nbsp; |<br>\r\n&nbsp; -&gt;FrameworkV1<br>\r\n&nbsp;&nbsp;&nbsp; |<br>\r\n&nbsp;&nbsp;&nbsp; -&gt;Source</p>\r\n<p>This structure feels pretty robust and mostly works well.&nbsp; However, I have a major issue that I cannot seem to resolve.&nbsp; The &quot;Shared&quot; Framework folder is a branch of the Framework team project's Main folder, as described in the MSDN article from\r\n Feb 2011.</p>\r\n<p>When I add project references in the &quot;DevMain&quot; project of the Portal team project, I am adding the reference to the project in the Shared Folder local to the Portal team project.&nbsp; It works great, and I can compile.</p>\r\n<p>Then, I try to merge from the Portal team project's DevMain folder into the same project's Main folder for testing/demo.&nbsp; Upon opening the solution file for that project, I am presented with the error message that &quot;Projects have recently been added\r\n to this solution. Do you want to get them from source control?&quot;.&nbsp; I click &quot;Yes&quot; and then receive the message &quot;One or more projects were not loaded correctly.&nbsp; Please see the output window for details&quot;.</p>\r\n<p>I can see in the DevMain solution file that the paths are RELATIVE.&nbsp; I also see that, following the merge from DevMain -&gt; Main of the Portal Team Project, that the solution file's paths CHANGE to point somewhere that doesn't exist.</p>\r\n<p>Am I missing something with the project references approach when merging from my DevMain branch to my Main branch??&nbsp; How do you configure them?</p>\r\n<p>Help ALM rangers!!&nbsp; Thanks for your impeding rescue.</p>\r\n<p>SixDArray</p>\r\n",
    "PostedDate": "2011-03-14T12:23:47.733-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "580279",
    "ThreadId": "249641",
    "Html": "<p>I just wrote a blog on this issue and some possible solutions:</p>\r\n<p><a href=\"http://blogs.msdn.com/b/billheys/archive/2011/03/14/project-dependencies-will-break-with-branching-if-not-done-properly.aspx\">http://blogs.msdn.com/b/billheys/archive/2011/03/14/project-dependencies-will-break-with-branching-if-not-done-properly.aspx</a></p>\r\n<p>Regards,<br />Bill Heys<br />VS ALM Ranger</p>",
    "PostedDate": "2011-03-14T14:03:46.853-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "582228",
    "ThreadId": "249641",
    "Html": "<p>Thanks for your response Bill, and your patience with my questions.&nbsp; Based on the Feb 2011 MSDN article and your blog post, I am currently able to get a functional setup in the following manner:</p>\r\n<p><strong>Team Project = Framework</strong><br />|<br />-&gt;Dev (Branched from $/Framework/Main)<br />&nbsp;&nbsp;&nbsp; |<br />&nbsp; &nbsp; -&gt;Source<br />-&gt;Main (Branch)<br />&nbsp; &nbsp; | <br />&nbsp;&nbsp;&nbsp; -&gt;Source<br /><br /><strong>Team Project = Portal</strong><br />|<br />-&gt;Dev (Branched from $/Portal/Main)<br />&nbsp; &nbsp; |<br />&nbsp;&nbsp;&nbsp; -&gt;Source<br />-&gt;Main (Branch)<br />&nbsp; &nbsp; | <br />&nbsp;&nbsp;&nbsp; -&gt;Source<br />-&gt;Shared (Folder)<br />&nbsp; &nbsp; |<br />&nbsp;&nbsp;&nbsp; -&gt; Framework (Branched from $/Framework/Main)</p>\r\n<p>This is working correctly with relative project references when merging from Dev-&gt;Main.&nbsp; Unfortunately, what this breaks is having the subfolders such as \"Releases\" with branches point to specific releases - those would not work with relative references since the Release subfolder causes the subsequent branches to be at a different depth.&nbsp; It was also nicer before to have a folder to hold all the development branches (Development with a Dev subfolder).</p>\r\n<p>How do you recommend handling release branches?&nbsp; Just as branches at the same depth as the Dev and Main branches?</p>\r\n<p>Also, do you think maybe another way around this is a first layer of folders, with a layer of branches underneath?&nbsp; It seems like a lot of folders but, at least it might work to keep the references relative.</p>\r\n<p>For example:</p>\r\n<p><br /><strong>Team Project = Framework</strong><br />|<br />-&gt;Dev Folder<br />&nbsp;&nbsp; |<br />&nbsp;&nbsp; -&gt;Dev (Branched from $/Framework/Main)<br />&nbsp;&nbsp; &nbsp; &nbsp; |<br />&nbsp; &nbsp; &nbsp;&nbsp; -&gt;Source<br />-&gt;Main Folder<br />&nbsp;&nbsp;&nbsp; |<br />&nbsp;&nbsp;&nbsp; -&gt;Main (Branch)<br />&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; | <br />&nbsp; &nbsp; &nbsp; &nbsp; -&gt;Source<br />-&gt;Release Folder<br />&nbsp; &nbsp; |<br />&nbsp;&nbsp;&nbsp; -&gt;ReleaseV1 (Branched from $/Framework/Main)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt;Source</p>\r\n<p><br /><strong>Team Project = Portal</strong><br />|<br />-&gt;Dev Folder<br />&nbsp; &nbsp; |<br />&nbsp;&nbsp;&nbsp; -&gt;Dev Branch (Branched from $/Portal/Main)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt;Source<br />-&gt;Main Folder<br />&nbsp;&nbsp;&nbsp; | <br />&nbsp;&nbsp;&nbsp; -&gt;Main Branch (Branch)<br />&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; | <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt;Source<br />-&gt;Release Folder<br />&nbsp;&nbsp;&nbsp; |<br />&nbsp;&nbsp;&nbsp; -&gt;ReleaseV1 (Branched from $/Portal/Main)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; -&gt;Source<br />-&gt;Shared (Folder)<br />&nbsp; &nbsp; |<br />&nbsp;&nbsp;&nbsp; -&gt; Framework (Branched from $/Framework/Main)</p>\r\n<p>Thanks again for your advice.</p>\r\n<p>&nbsp;</p>\r\n<p>SixDArray</p>",
    "PostedDate": "2011-03-17T10:33:44.34-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "582230",
    "ThreadId": "249641",
    "Html": "<p>Arg, I just realized I have a few typos in my example above (the path for the ReleaseV1 in the Portal Team Project should have been $/Portal/Main/Main I think).&nbsp; But you get the idea.</p>\r\n<p>SixDArray</p>",
    "PostedDate": "2011-03-17T10:35:28.66-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "582236",
    "ThreadId": "249641",
    "Html": "<p>I think you have two choices for the Release branches. Keep them at the same folder-depth as Main and Dev (maybe having Main and Dev in their own containders)</p>\r\n<p>OR</p>\r\n<p>put all the dependent code in a folder subordinate to Main (and Dev, etc). This will force it to be at the same relative depth regardless of the depth that Main, Dev, and Release are within th Team Project. You can either branch or copy the code, but however it gets there you need to keep the dependent (referenced) projects at the same relative postion to the solution / project.</p>\r\n<p>Regards,<br />Bill Heys<br />VS ALM Ranger</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-03-17T10:50:41.49-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "582237",
    "ThreadId": "249641",
    "Html": "<p>I like your last option best, I think.</p>\r\n<p>Regards,<br />Bill</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-03-17T10:51:45.35-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "582310",
    "ThreadId": "249641",
    "Html": "<p>Just to follow up, I restructured my source tree as in the last example, and that works well now.&nbsp;</p>\n<p>It also opens up two possibilities for linking the shared framework for the Project References:</p>\n<ol>\n<li>You can reference the shared framework project \"in situ\" (wherever it got checked out on your hard drive) - this prevents making a copy of the project and the VS2010 TFS plugin still recognizes that I made changes to the shared framework. </li>\n<li>You can use a full branch into the Shared folder, and then reference the copied shared framework project in the dependent project.&nbsp; That works just fine, but requires a copy of the project. </li>\n</ol>\n<p>As for which of the shared framework \"branches\" to link to the dependent project, I am finding that your recommendation to link the Main branch is probably the best, although I could see situations where you might want only want to link a stable release  branch, or an actual separately branched development branch (in the original shared project) also.</p>\n<p>Any guidance as to which is the best branch of a shared framework to link to in a dependent project?&nbsp; For now I will stick to Main.</p>\n<p>Also, I'll try to write up and post my final solution to my blog and link it here once I'm done with it.</p>\n<p>SixDArray</p>",
    "PostedDate": "2011-03-17T13:07:32.22-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "582326",
    "ThreadId": "249641",
    "Html": "<p>Let me restate your question to: \"Which is the best branch of the shared source project to branch from?\"</p>\r\n<p>Branch from Main in the source Team Project if you think you want changes to be merged from the target team project (the dependent project), back to the source team project. You never want to merge changes *into* a release branch.</p>\r\n<p>Branch from a Release branch in the source Team Project if you do NOT want to merge changes from the target project back to the source project and / or if you need to branch from a prior release of the source project.</p>\r\n<p>An&nbsp;important consideration for when you reference the shared source project \"in situ\" is that to make sure that you do not break a build. The Build workspace matching will need to match your local workspace mapping or it might break. A benefit of referencing the shared source project *in situ* is that any changes you make to the source are immediately visible to the dependent (referencing) projects. Since you did not branch from the source team project, you do not need to merge any changes into the dependent projects. This may not seem like a big deal, but in the Visual Studio developer division, where there are many dependencies between dozens or tens of dozens of projects, branching rather than referencing *in situ* could be a merge nightmare.</p>\r\n<p>Regards,<br />Bill Heys</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-03-17T13:47:21.95-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "582396",
    "ThreadId": "249641",
    "Html": "<p>I'm investigating a very similar folder structure design question. I haven't broken any references yet, but I have the opportunity to avoid (or cause) relative path issues starting next week.<br /><br /><strong>QUESTION: Are there any significant drawbacks to having the Main branch in a subfolder to avoid folder depth reference problems?</strong><br />This is the second bullet at the end of Bill's (awesome) blog. Excerpt from <a href=\"http://blogs.msdn.com/b/billheys/archive/2011/03/14/project-dependencies-will-break-with-branching-if-not-done-properly.aspx\">http://blogs.msdn.com/b/billheys/archive/2011/03/14/project-dependencies-will-break-with-branching-if-not-done-properly.aspx</a></p>\r\n<ul>\r\n<div style=\"padding-left: 30px;\"><span style=\"color: #808080;\">\r\n<li>(#1) Keep all dependent assemblies or projects in a folder <strong>that is subordinate to the branch</strong>, but the downside is that you will be copying the assemblies and / or the project source to each child branch. </li>\r\n<li></li>\r\n</span>(#2) Keep all dependent assemblies or projects in a folder within the team project that is outside of the branch, but the downside is that <strong>all branches must be at the same folder depth </strong>within the team project. This may not be a problem if a person who is responsible for creating branches is familiar with this dependency issue. The risk is that a branch might be created at a different folder level (folder depth) within the Team Project. This will then break relative project or assembly references for solutions under that branch.</div>\r\n</ul>\r\n<p>My thoughts:</p>\r\n<p style=\"padding-left: 30px;\"><strong>PRO: </strong>All developers can create relative references \"inside\" or \"outside\" the branch folder without worrying about breaks due to merging to or from Main. Relative references to files in other Team Projects (or other path not under the Branch folder) won't break just by merging to Main.<br /><strong>PRO: </strong>You can do both (#1) and (#2) or just (#2) and not break relative references. The same does NOT go for just doing (#1). If you can keep all&nbsp;references \"inside\" the branch folder (#1) then you're pretty safe regardless of branch folder depth differences (if any).<br /><strong>PRO: </strong>You don't have to move any references or worry about introducing new breaks&nbsp;if you already have all branches at the same folder depth.<br /><strong>PRO/<span style=\"color: #ff0000;\">CON: </span></strong>You won't see builds break in the Main branch when \"outside\" relative references are encountered.</p>\r\n<p style=\"padding-left: 60px;\">This might be a CON if you want to enforce only \"inside\" relative references. Having all references contained within the branch makes it less likely to accidentally miss part of the files needed to build that branch in the future. For example, if your archive process is to move Team Projects to another Team Project Collection then delete the Team Project then relative references between Team Projects may be very undesirable. Of course you need build automation in the Main branch to identify relative reference breaks.<br />Otherwise it is a PRO because you avoid a build break and/or avoid needing customized build steps just for the Main branch.</p>\r\n<p style=\"padding-left: 30px;\"><span style=\"color: #ff0000;\"><strong>CON: </strong></span>Having the Main branch in a subfolder is not the normal \"industry standard\" location.&nbsp;</p>\r\n<p style=\"padding-left: 30px;\">If you follow (#2) then all branch creators should be aware to follow same-depth pattern. However if you have Main one folder down then every developer creating relative references must be aware of breaking references when integrating and building from Main (or other branch at different folder depth).</p>\r\n<p><strong>My Situation:</strong></p>\r\n<p>1. Our current branch structure has all branches at same folder depth. <br />2. I suspect we have very few \"outside\" relative references currently, but we may soon choose to reference shared source projects \"in situ\" for same reason mentioned in Bill's previous post today.<br />3. It was proposed that we move our Main down one folder from $/TeamProject/<strong><span style=\"color: #ff0000;\">QA/</span></strong>Main to $/TeamProject/Main. &nbsp;This would match the folder structure patterns shown in the TFSBranchingGuideIII Scenarios diagram&nbsp;and several other common practice references.&nbsp; There was not much discussion for keeping folder depth same because impact to relative references were not considered.<br />4. This Friday I implement our plan on the $/Platform Team Project. (!)</p>\r\n<p><br /><strong>Example </strong>below shows 3 folders in each Team Project (Dev, QA, Release). \"-\" dashes indicate branch depth from Main, <span style=\"color: #808000;\">brown=shared code folders</span>, <span style=\"color: #808080;\">grey=descriptions</span>)<br /><strong>$/Platform</strong>&nbsp;&nbsp; <span style=\"color: #808080;\">(Contains our recent shared code and shared services for our new SOA-based platform architecture)</span><br />&nbsp;&nbsp;&nbsp; /Dev<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -Int&nbsp;&nbsp;&nbsp; <span style=\"color: #808080;\">(Child of Main Most devs work directly in Int branch)</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --Story1001&nbsp;&nbsp;&nbsp;<span style=\"color: #808080;\"> (Short-lived child of Int branch, ideally &lt;3 weeks before merge to Int &amp; close)</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --Platform1.0Hotfix1234&nbsp; <span style=\"color: #808080;\">&nbsp;(Short-lived child of Platform1.0 branch to resolve complex fix for Production bug/WI#1234)</span><br />&nbsp;&nbsp;&nbsp; /QA<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Main<br /><span style=\"color: #808000;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>\\Lib\\Logger</strong></span><br /><span style=\"color: #808000;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\Services\\<br /><span style=\"color: #808000;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\Lib<br /><span style=\"color: #808000;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>\\ThirdParty</span><br /><span style=\"color: #808000;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\...</span><br /><span style=\"color: #808000;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\Microsoft</span><br /><span style=\"color: #808000;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>&nbsp; \\EnterpriseLibrary5.0</strong></span><br /><span style=\"color: #808000;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\...</span><br />&nbsp;&nbsp;&nbsp; /Release<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -Platform1.0&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -Platform1.5<br /><br /><strong>$/ProjectA</strong><br />&nbsp;&nbsp;&nbsp; /Dev<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -Int&nbsp;&nbsp;&nbsp; <span style=\"color: #808080;\">(Child of Main Most devs work directly in Int branch)</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --Story1001&nbsp;&nbsp;&nbsp;<span style=\"color: #808080;\"> (Short-lived child of Int branch, ideally &lt;3 weeks before merge to Int &amp; close)</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--LoggerRefactor1 <span style=\"color: #808080;\">(Short-lived child of Int branch, ideally &lt;3 weeks before merge to Int &amp; close)</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --ProjectA2.5Hotfix2343&nbsp; <span style=\"color: #808080;\">&nbsp;(Short-lived child of ProjectA2.5 branch to resolve complex fix for Production bug/WI#2343)</span><br />&nbsp;&nbsp;&nbsp; /QA<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Main<br />&nbsp;&nbsp;&nbsp; /Release<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -ProjectA2.5</p>\r\n<p>As a side note I'm a little perplexed about having Main at a different folder depth requiring only \"inside\" relative references but TFS Branch Folders feature not allowing a child branch of Shared to be nested in a subfolder of a branch. I feel like have missed something and need to re-read through the relative reference posts another couple times.</p>\r\n<p>Thanks for your time and any feedback.&nbsp; -Zephan</p>",
    "PostedDate": "2011-03-17T17:55:50.557-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "582404",
    "ThreadId": "249641",
    "Html": "<p>Hi Zephan,</p>\n<p>One initial reaction - might be careful moving your Platform Main down from QA - that might mean that the references in the Platform Main solution file would now be relative at one level LOWER, which might throw stuff off.&nbsp; I felt the same about \"missing\" something  - but I can't find what it is I missed!</p>\n<p>It's counter-intuitive (to me too), but your QA folder may be helping keep relative references at the same depth, no matter whether you are in Dev, QA or Release folders.&nbsp; The other option seems to be to just keep all the branches at the same level at the root.&nbsp;  That works but seems like a flat structure might just get messy fast, and the subfolders help keep things organized.</p>\n<p>Unless Bill or somebody from Microsoft tells us it's a horrible idea, I don't think there is any reason you can't keep your Main branch nested in a folder.&nbsp; It seems excessive, maybe Microsoft missed out not just managing the relative references for us (could  they have an \"add team project reference\" feature or something and have the VS2010 TFS plugin do the work for us?).&nbsp; After all, it's your source tree, you can have it the way you like (or need!) :)</p>\n<p>If this helps any, here is the exact structure I have working right now:</p>\n<p><strong>$/Platform</strong><br /> &nbsp;&nbsp; /Dev<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Feature1<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Bin<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Docs<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Source<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SolutionFile.sln<br /> &nbsp;&nbsp; /Mainline <span style=\"color: #ff0000;\">(like your QA folder, but mine is just named badly)</span><br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Main<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Bin<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Docs<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Source<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SolutionFile.sln<br /> &nbsp;&nbsp; /Releases<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Release1<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Bin<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Docs<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Source<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SolutionFile.sln<br /> <br /> <strong>$/ProjectA</strong><br /> &nbsp;&nbsp; /Dev<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Feature1<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Bin<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Docs<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Source<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SolutionFile.sln<br /> &nbsp;&nbsp; /Mainline<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Main<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Bin<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Docs<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Source<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SolutionFile.sln<br /> &nbsp;&nbsp; /Releases<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Release1<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Bin<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Docs<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /Source<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SolutionFile.sln</p>\n<p>I am using the \"in-situ\" project references, and ensuring that my local workspace mapping is always mapping the references correctly.&nbsp; So far it is working ok, and I haven't noticed any major problems yet.</p>\n<p>Hope that helps - your original question stands for someone above my pay-grade - is it really any problem having MAIN in a subfolder?</p>\n<p>SixDArray</p>",
    "PostedDate": "2011-03-17T18:29:30.703-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "597999",
    "ThreadId": "249641",
    "Html": "<p>I like the idea of having each of your branches at the same relative folder depth within a Team Project. It might minimize broken relative references when you branch.<br />Regards,<br />Bill Heys<br />VS ALM Ranger</p>",
    "PostedDate": "2011-04-15T08:28:18.133-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "598057",
    "ThreadId": "249641",
    "Html": "<p>It's working great in practice too - I've been using this method (since I posted last) for all of my development projects, and I haven't had any issues at all.</p>\r\n<p>Thanks for your help Bill! :)</p>\r\n<p>Jon</p>",
    "PostedDate": "2011-04-15T09:46:56.497-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]