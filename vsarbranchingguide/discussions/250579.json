[
  {
    "Id": "583936",
    "ThreadId": "250579",
    "Html": "\r\n<p>Right now my company has a major release every 3 months.&nbsp; In between major releases we have monthly maintenance releases. (Similar to the &quot;Advanced Branching Plan&quot;) Our monthly release usually is limited to high priority bugs based on customer complaints\r\n and business needs.</p>\r\n<p>Scenario:<br>\r\nLets say there is a production bug reported by a customer shortly after a major release.&nbsp; It hasn't been determined if this bug will be included in a hotfix, the next maintenance release, or the next major release. What branch should the developer make\r\n their changes?</p>\r\n<p>We currently work bugs in our development branch if we don't know if the fix will be part of the next maintenance release. The problem is that this often leads to cherry picking changesets out of fixed bugs and new development work. One idea we were throwing\r\n around was to create a new branch called &quot;Bugs&quot; from the parent &quot;Main&quot;. This would separate our sprint work from customer defects.&nbsp; The thought was that this would help separate sprint work from production bug fixes.&nbsp; I am just curious if this is\r\n a bad idea or if anyone has any other ideas?&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Main<br>\r\n&nbsp;&nbsp; --------------------------------<br>\r\n&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>\r\nDevelopment&nbsp;&nbsp; Bugs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Maint 2<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Maint 1<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Release</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-03-21T12:49:44.563-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "584004",
    "ThreadId": "250579",
    "Html": "<p>Key excerpt from above:&nbsp;&nbsp;\"It hasn't been determined if this bug will be included in a hotfix, the next maintenance release, or the next major release.\"</p>\n<p>It would really really help to triage the bug thoroughly and have project owner and/or Dev+Test+PM commit to a release timeframe before coding begins.&nbsp;Triage process and management commitment can reduce if not eliminate this uncertainty. If triage commitment is not possible (release timeframe is unknown) then I would assume and prepare for the worst case: The bug might require an emergency hotfix release.</p>\n<p><strong>Emergency hotfix branch:</strong> Create&nbsp;a dedicated hotfix##### branch&nbsp;as a child of Release for each bug that might need to be released separately.</p>\n<p style=\"padding-left: 30px;\">Develop and test the fix directly off Release safely isolates changes from any other&nbsp;code that hasn't been released.&nbsp;&nbsp;OK to develop 2+ bugs in same hotfix if related, but they cannot ship separately and cannot be selectively rolled back without introducing cherry picking risks. If you never have concurrent hotfixes under development you could use a single \"Hotfix\" branch off Release... but chances are as soon as you set this up you'll have two concurrent high-priority bugs without knowing which one will need to ship first. Another risk is one hotfix getting stuck in development or testing which delays the release of all other hotfixes in the same branch.</p>\n<p style=\"padding-left: 30px;\">Branch name \"hotfix#####\" should be unique. For example, ##### could be the Work Item number associated with tracking this bug or specific hotfix. Or some clever \"Hotfix&lt;Feature&gt;&lt;Major&gt;.&lt;Minor&gt;.&lt;hotfix#Increment&gt;\"</p>\n<ol>\n<li>If the fix truly is a hotfix then your branching is proper for a clean release: <ol>\n<li>FI (Forward Integrate) from <strong>Release </strong>to <strong>hotfix#####</strong> (just to&nbsp;make sure any other hotfixes are included) </li>\n<li>Final test&nbsp;(required if FI from step 1&nbsp;brought in any changes) </li>\n<li>RI (Reverse Integrate) from <strong>Hotfix#####</strong>&nbsp;to the <strong>Release </strong>branch<br /><br />Once fix is accepted in Release then merge it back through the tree so all future releases contain the fix (or intentionally omit it by manual merge resolution): </li>\n<li><em>Lock/close the hotfix##### branch</em>. </li>\n<li>RI-only from <strong>Release </strong>to <strong>Maint1</strong>, then RI-only from <strong>Maint1</strong> to <strong>Maint2</strong>, then RI from <strong>Maint2</strong> to <strong>Main</strong>. <br /><span style=\"color: #ff0000;\"><strong>IMPORTANT: </strong></span>Do not FI from Maint1, Maint2, or Main (before or after RI)&nbsp;because that would merge pre-relesed code to the release branch! </li>\n<li>FI from <strong>Main </strong>to <strong>Development </strong>branch </li>\n</ol></li>\n<li>If the bug fix is decided to be part of Maint1 (,Maint2,) or Development&nbsp;then do a baseless merge to that branch and <em>then lock/close the hotfix##### branch</em>.<br />Be carefult to manually review any merge conflicts. Don't worry about </li>\n</ol>\n<p>Keep in mind that a hotfix candidate should be very tactical which makes baseless merge less risky for scenario #2. If the bug fix is more complex in scope then immediately push back hard on even considering the change as a hotfix release. Sometimes it is better to live with the devil you know. I was once told that the odds are good that you will introduce one new bug for every two bug fixes. The big question is whether that one regression is worse than what you tried to fix :-).</p>\n<p>Multiple hotfixes can be developed concurrently. Look at the \"Branch by Feature\" (\"Multi-Feature Teams scenario\" in TFSBranchingGuideIII) for basic diagram... only think of Release as the main branch for these \"hotfix\" features.</p>\n<p><strong>RE: Adding a Bugs branch as a&nbsp;child of Main branch</strong></p>\n<p style=\"padding-left: 30px;\">I don't think adding a Bugs branch as a child of Main will give you a clean route to Release. When you branch Bugs from Main will it have only the same code that Release branch has... or potentially some other stuff from main?</p>\n<p style=\"padding-left: 30px;\"><strong>Caution: </strong>If you merge a bugfix through Main you can pick up other changes already in Main. To avoid this you'd have to cherry pick merge just the bugfix files. If any of those files are already changed in Main then you'd have to roll back changes in Main, then merge through (very careful not to pick up unintended changes), then restore the rolled back change(s) to Main. To see what that looks like you can look up the \"Branch by Quality\" pattern (which is NOT in the TFS Branching guide, possibly By Design). While this is all possible, I am in the process of moving our branches away from \"Branch by Quality\" to avoid risk and work required to temporarily roll back changes in a branch just to ship a fix.</p>\n<p style=\"padding-left: 30px;\">Even if you get through Main without picking up unexpected changes you'll need to repeat the same careful process to get through Maint2 and Maint1. At this point your best option would probably be to do a baseless merge directly into Release, then RI change back through to Main etc... which would be better done by starting with a short-lived hotfix branch directly off Release.</p>\n<p>I hope this is helpful (or at least encourages more useful comments from others). Good luck!</p>\n<p>- <em>Zephan</em></p>",
    "PostedDate": "2011-03-21T14:06:49.687-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "584063",
    "ThreadId": "250579",
    "Html": "<p>In the Rangers Branching Guidance, the Release branches have a specific relationship to each other. In each of the plans, the Release branch is locked down (made read-only) to capture each major and&nbsp;/ or minor release shipped to a customer. Since the Release branch is read-only it must be at the lowest level in the release branch hierachy (with Main at the top). If you are doing post-release servicing, then we suggest having a Servicing branch between Main and Release or even&nbsp;a Service Pack branch (as child of Main) and a Hotfix branch (as child of ServicePack) with Release as child of Hotfix (and then made read-only.</p>\r\n<p>Having a hotfix branch as a child of release will make it impossible to move a hotfix to Main in order to have it be part of the next minor or major release. If you review the advanced branch plan, therefore you will see a branch for hotfixes (where all post-release bugs are fixed in the current release). These hot fixes can be <strong>Reverse Integrated </strong>from the hotfix branch to the service pack branch, in the event you want to roll-up one or more hotfixes into a more thoroughly-tested Service Pack. From there the hot fixes can be <strong>Reverse Integrated </strong>from the Service Pack branch to Main (which is opened for vNext development when the vCurrent Release branch tree is created.</p>\r\n<p>Your Bugs branch (as a child of Main corresponds to the HotFix or Servicing branch in the advanced or standard branch plan, respectively. The primary difference is that the Release branch is a child of the hotfix or servicing branch, rather than in a separate branching structure. This allows you to have mutliple active release sets (consisting of Service Pack, Hotfix, Release branches) for each of the minor or major releases you need to support in parallel. The hotfix would be applied to the specific release the bug is found in, and then merged (RI) to Main and possibly into vNext development branches.</p>\r\n<p>This structure does, in fact, separate your sprint work (in a sprint development branch) from the Release and Post release bug fixing. It also allows Main to remain as stable as possible. It also means you won't need to cherry pick changes (avoid cherry picking if at all possible).</p>\r\n<p>Since the development branches are working on vNext work while vCurrent is released, I discourage you from fixing bugs in vCurrent in the vNext development branch. If you released sprint 1, fix defects in sprint 1 on the release side, and fix bugs in sprint 2 in the development side (vNext).</p>\r\n<p>I am not sure what the purpose of maint1 and maint2 branches are (between your Main and Release).</p>\r\n<p>My difference of opinion with Zephan's suggestions are that I never make a hotfix branch a <strong>child</strong> of release (for reasons stated above). To the contrary <strong>Release is a child of hotfix</strong>. At the time you create the release, the contents of hotfix and relase are the same. Release is made read-only and Hotfix is available for making defect fixes against what was released.</p>\r\n<p>The problem with inverting the structure, is you cannot move a hotfix to Main without going through Release, and doing so means you no longer have a copy of the code <strong>as released. </strong>If you don't want a locked-down read-only <strong>release </strong>branch, then skip the hotfix branch altogether, make the hotfixes in the release branch directly (obviously you would not be able to make release read-only in this scenario).</p>\r\n<p>Regards,<br />Bill Heys<br />VS ALM Ranger</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-03-21T16:06:26.603-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "584066",
    "ThreadId": "250579",
    "Html": "<p>Zephan,</p>\r\n<p>&nbsp;&nbsp;&nbsp; \"To see what that looks like you can look up the \"Branch by Quality\" pattern (<strong>which is NOT in the TFS Branching guide, possibly By Design</strong>).\" - Exactly</p>\r\n<p>Regards,<br />Bill Heys</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-03-21T16:12:45.733-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "584510",
    "ThreadId": "250579",
    "Html": "<p>I am seeing the advantage of having production bug fixes in the Hotfix branch of the Release Vehicle, however I am still a little confused on how to handle multiple service packs.</p>\r\n<p>So for example lets say we had a major release in February with SP1 planned for March and SP2 planned for April. Release branch is locked down and (RI) back to Main.&nbsp; Post February release there are 8 production bugs reported.&nbsp; Developers fix bugs in Hotfix branch.</p>\r\n<p>Major Release - February<br />SP1&nbsp; - March<br />SP2&nbsp; - April<br />HotFix - contains fixes for bugs 1,2,3,4,5,6,7,8</p>\r\n<p>After bugs have been completed in the Hotfix branch Management determines that:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bugs 1, 2, 3 need to be in SP1 (March)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bugs 4, 5, 7 need to be in SP2 (April)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bugs 7, 8 will go with the next version</p>\r\n<p>Is there a branching strategy that can encompass all this in the Release Vehicle?</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-03-22T10:34:04.023-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "584544",
    "ThreadId": "250579",
    "Html": "<p>Let's use the following scenario:</p>\n<p>In February, you release v1.0, that has been under development. While it was being developed, v1.0 was vNext. Once it is released, it now becomes vCurrent, and development begins on v2.0 (the new vNext)</p>\n<p>So when you release vNext, you create (all at the same time) Service Pack branch for Release 1.0 (child of Main), Hotfix branch for Release 1.0 (child of Service Pack) and Release branch for Release 1.0 (made read-only)</p>\n<p>Presumably you have some post-release fixes to production for vCurrent. You fix bugs 1,2, and three in the Hotfix branch. You decide to roll-up these fixes into a Service Pack.. so you Merge (Reverse Integrate) bugs 1,2, and 3 into the Service Pack branch for Release 1.0. After thorough testing you release this Service Pack to customers.</p>\n<p>AT THIS POINT (March), you could choose to make a new branch for the Released Service Pack (for example, branch Service Pack 1.0 to Hotfix 1.0.1 and Release 1.0.1 and make Release 1.0.1 read-only.</p>\n<p>Now you find more bugs to fix, so you fix these bugs in the hotfix branch (for wither Release 1.0 or Release 1.0.1 depending on whether the bug is in the original release (1.0), or the service pack (release 1.0.1)</p>\n<p>Note that you do not need a new branch for the service pack ... it continues, once Service pack 1 is shipped in March to be available for stabilizing Service pack 2.</p>\n<p>bugs can be fixed in either the Hotfix branch for Release 1.0 or the Hotfix branch for Release 1.0.1 (SP1).</p>\n<p>Now (April) you decide to ship SP2 (so you merge any changes in eithe hotfix branch below the Service Pack branch for Release 1.0.x up to the Service Pack branch (RI). You stabilize the bugs (4,5,6) and ship Service Pack 2.</p>\n<p>Same process as in March, you make a new HotFix branch for this new Service Pack, and a new Release branch for Release 1.0.2 (SP2). Make the Release branch Read only.</p>\n<p>At this point you have ONE Service Pack branch and three Hotfix branches (1.0, 1.0.1, and 1.0.2), and three Release branches (1.0, 1.0.1, and 1.0.2).</p>\n<p>Bugs 7 and 8 get fixed in one of these three hotfix branches. They get merges (RI) to the Service Pack Branch and either stabilized for another SP (SP3) or merged again (RI) to Main where they are part of the next Major/Minor release.</p>\n<p>From Main they get merged (FI) to the vNext development branches.</p>\n<p>I hope this helps.</p>\n<p>I just posted this thread on my blog: <a href=\"http://blogs.msdn.com/b/billheys/archive/2011/03/22/where-do-i-fix-a-production-defect.aspx\">http://blogs.msdn.com/b/billheys/archive/2011/03/22/where-do-i-fix-a-production-defect.aspx</a>&nbsp;</p>\n<p>Regards,<br />Bill Heys<br />VS ALM Ranger.</p>",
    "PostedDate": "2011-03-22T11:49:04.43-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "597979",
    "ThreadId": "250579",
    "Html": "<p>Thanks for the previous posts. They have been extremely helpful. &nbsp;</p>\r\n<p>I was thinking of taking a slightly different approach for the release vehicle and was wondering what your thoughts are.</p>\r\n<p>Using the senerio discussed previously, my team will probably never completely merge all bugs fixed in a Hotfix branch(e.g. 1.0) into the next Service Pack release (e.g. 1.0.1). There will always have to be some cherry picking done. &nbsp;Not ideal but it is what it is.</p>\r\n<p>Instead of having to maintain multiple(3) hotfix branches I was thinking of creating one Fixes branch that would be a child of Service Pack 1.0. &nbsp;When a release is complete (e.g 1.0) would be merged (RI) to Service Pack 1.0 and Main. &nbsp;Service Pack 1.0 would then merge (FI) to Fixes branch. &nbsp;</p>\r\n<p>When it is time to branch Release 1.0.1 any fixes identified to be in the release would be merged (RI) from Fixes to Service Pack 1.0 before creating the new branch.<br /><br />____________________Service Pack 1.0_____________________<br />| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| &nbsp; &nbsp;&nbsp;<br />Release 1.0 &nbsp; &nbsp; Release 1.0.1 &nbsp; &nbsp; Release 1.0.2 &nbsp; &nbsp; Fixes</p>",
    "PostedDate": "2011-04-15T08:07:31.777-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "597995",
    "ThreadId": "250579",
    "Html": "<p>If you make the three Release branches read-only, there is no place to make a hotfix for Release 1.0 separate from Release 1.0.1 and / or Release 1.0.2. Having separate Hotfix branches between the Service Pack branch and the Release branches gives you a place to make and isolate hot fixes for each release.</p>\r\n<p>Regards,<br />Bill Heys<br />VS ALM Ranger</p>",
    "PostedDate": "2011-04-15T08:26:20.483-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "598080",
    "ThreadId": "250579",
    "Html": "<p>If a hotfix were to come up after <strong>Release 1.0</strong> and before <strong>Release 1.0.1</strong> a new branch would be created from <strong>Release 1.0</strong> (e.g. Release 1.0 HotFix).&nbsp; Changes would be made in the <strong>Release 1.0 HotFix </strong>branch.&nbsp; After hotfix is released <strong>Release 1.0 Hotfix </strong>would be merged (RI) to <strong>Release 1.0</strong> and <strong>Service Pack 1.0</strong>.</p>\r\n<p><strong>Release 1.0</strong> would always consist of the latest code in production until Release 1.0.1.&nbsp;</p>\r\n<p>____________________Service Pack 1.0_____________________<br />| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| &nbsp; &nbsp;&nbsp;<br />Release 1.0 &nbsp; &nbsp; Release 1.0.1 &nbsp; &nbsp; Release 1.0.2 &nbsp; &nbsp; Fixes</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |</p>\r\n<p>Release 1.0 Hotfix</p>\r\n<p>The <strong>Fixes </strong>branch would consist of production bugs that have been fixed, but it is unknown if these bugs will be included in <strong>Release 1.0.1</strong> or <strong>Release 1.0.2</strong> or the next major release.&nbsp;&nbsp;<strong>Service Pack 1.0</strong> would be allowed to merge (FI) the latest code to the&nbsp;<strong>Fixes </strong>branch as needed.&nbsp;&nbsp;&nbsp;This would allow the <strong>Fixes </strong>to have the previous release's code making&nbsp;easier&nbsp;merging (RI)&nbsp;to <strong>Service Pack 1.0&nbsp;</strong>bugs&nbsp;that are&nbsp;required for the next release.&nbsp;&nbsp;This also would&nbsp;eliminate having to&nbsp;make merges (RI)&nbsp;from Hotfix branches that are not current with&nbsp;<strong>Service Pack 1.0</strong>.&nbsp;&nbsp;(e.g.&nbsp; Release 1.0 and 1.0.1 are done.&nbsp; Fixed bugs from Hotfix 1.0 need to be merged to Service Pack 1.0 to be included in Release 1.0.2)</p>",
    "PostedDate": "2011-04-15T10:23:57.083-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]